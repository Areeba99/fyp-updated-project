{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\HomeScreen.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport UserContext from \"../connection/userContext\";\nimport { Firebase } from \"../connection/comms\";\nimport ServicesList from \"../components/ServicesList\";\nexport default function HomeScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      Loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      refreshing = _useState6[0],\n      setRefreshing = _useState6[1];\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn,\n      setLoggedin = _useContext.setLoggedin;\n\n  var loadDataInView = function loadDataInView() {\n    Firebase.getHomeScreenData(loggedIn.uid).then(function (r) {\n      setData(r);\n      setLoading(false);\n      setRefreshing(false);\n    });\n  };\n\n  useEffect(function () {\n    if (Loading === true) {\n      loadDataInView();\n    }\n  });\n\n  var onRefresh = function onRefresh() {\n    setRefreshing(true);\n    setLoading(true);\n  };\n\n  return React.createElement(UserContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }, React.createElement(ScrollView, {\n      style: styles.container,\n      refreshControl: React.createElement(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 49\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: {\n        paddingLeft: 20,\n        fontWeight: \"bold\",\n        fontSize: 20,\n        marginVertical: 20\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }\n    }, \"Recommended Services\"), React.createElement(ServicesList, {\n      services: data,\n      navigation: navigation,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    })));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  header: {\n    padding: 20\n  },\n  smallText: {\n    fontSize: 15,\n    fontStyle: \"italic\",\n    fontWeight: \"200\",\n    color: \"grey\"\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/HomeScreen.js"],"names":["React","useContext","useEffect","useState","UserContext","Firebase","ServicesList","HomeScreen","navigation","route","Loading","setLoading","data","setData","refreshing","setRefreshing","loggedIn","setLoggedin","loadDataInView","getHomeScreenData","uid","then","r","onRefresh","styles","container","paddingLeft","fontWeight","fontSize","marginVertical","StyleSheet","create","flex","backgroundColor","header","padding","smallText","fontStyle","color","title"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {RefreshControl, ScrollView, StyleSheet, Text, View} from 'react-native'\nimport UserContext from \"../connection/userContext\";\nimport {Firebase} from \"../connection/comms\";\nimport ServicesList from \"../components/ServicesList\";\n\nexport default function HomeScreen({navigation, route}) {\n\n    const [Loading, setLoading] = useState(true)\n    const [data, setData] = useState(null)\n    const [refreshing, setRefreshing] = useState(false);\n    const {loggedIn, setLoggedin} = useContext(UserContext)\n\n    const loadDataInView = () => {\n        Firebase.getHomeScreenData(loggedIn.uid).then(r => {\n            setData(r)\n            setLoading(false)\n            setRefreshing(false)\n        })\n    }\n\n    useEffect(() => {\n        if (Loading === true) {\n            loadDataInView()\n        }\n\n    })\n\n    const onRefresh = () => {\n        setRefreshing(true)\n        setLoading(true)\n\n    }\n\n    return (\n        <UserContext.Consumer>\n            {({loggedIn, setLoggedin}) => (\n                <View style={styles.container}>\n                    <ScrollView style={styles.container}\n                                refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh}/>}>\n                        <Text style={{paddingLeft:20, fontWeight: \"bold\",fontSize: 20, marginVertical: 20,}}>Recommended Services</Text>\n                        <ServicesList services={data} navigation={navigation}/>\n                    </ScrollView>\n                </View>\n            )}\n        </UserContext.Consumer>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n    },\n    header: {\n        padding: 20,\n    },\n    smallText: {\n        fontSize: 15,\n        fontStyle: \"italic\",\n        fontWeight: \"200\",\n        color: \"grey\"\n    },\n    title: {\n        fontSize: 30,\n        fontWeight: \"bold\"\n    }\n});\n"]},"metadata":{},"sourceType":"module"}