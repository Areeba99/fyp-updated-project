{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\DetailsScreen.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport UserContext from \"../connection/userContext\";\nimport { Fetch } from \"../connection/comms\";\nimport TrainsList from \"../components/TrainsDetailsList\";\nexport default function DetailsScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      Loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      trains = _useState4[0],\n      setTrains = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      refreshing = _useState6[0],\n      setRefreshing = _useState6[1];\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn,\n      setLoggedin = _useContext.setLoggedin;\n\n  var loadDataInView = function loadDataInView() {\n    Fetch.getData(route.params.stationCode).then(function (res) {\n      setTrains(res.departures.all);\n      setLoading(false);\n      setRefreshing(false);\n    });\n  };\n\n  useEffect(function () {\n    if (Loading === true) {\n      loadDataInView();\n    }\n  });\n\n  var onRefresh = function onRefresh() {\n    loadDataInView();\n    setRefreshing(true);\n    setLoading(true);\n  };\n\n  return React.createElement(UserContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: styles.header,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: styles.smallText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    }, \"Showing All Trains For Your Location\"), React.createElement(Text, {\n      style: styles.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }\n    }, \"\\uD83D\\uDDFA \", route.params.stationName)), React.createElement(ScrollView, {\n      style: styles.container,\n      refreshControl: React.createElement(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 49\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, React.createElement(TrainsList, {\n      trains: trains,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: {\n        textAlign: \"center\",\n        paddingVertical: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, \"No more trains leaving today üöè\")));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  header: {\n    padding: 20\n  },\n  smallText: {\n    fontSize: 15,\n    fontStyle: \"italic\",\n    fontWeight: \"200\",\n    color: \"grey\"\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/DetailsScreen.js"],"names":["React","useContext","useEffect","useState","UserContext","Fetch","TrainsList","DetailsScreen","navigation","route","Loading","setLoading","undefined","trains","setTrains","refreshing","setRefreshing","loggedIn","setLoggedin","loadDataInView","getData","params","stationCode","then","res","departures","all","onRefresh","styles","container","header","smallText","title","stationName","textAlign","paddingVertical","StyleSheet","create","flex","backgroundColor","padding","fontSize","fontStyle","fontWeight","color"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {RefreshControl, ScrollView, StyleSheet, Text, View} from 'react-native'\nimport UserContext from \"../connection/userContext\";\nimport {Fetch} from \"../connection/comms\";\nimport TrainsList from \"../components/TrainsDetailsList\";\n\nexport default function DetailsScreen({navigation, route}) {\n\n    const [Loading, setLoading] = useState(true)\n    const [trains, setTrains] = useState(undefined)\n    const [refreshing, setRefreshing] = useState(false);\n    const {loggedIn, setLoggedin} = useContext(UserContext)\n\n\n    const loadDataInView = () => {\n        Fetch.getData(route.params.stationCode).then(res => {\n            setTrains(res.departures.all)\n            setLoading(false)\n            setRefreshing(false)\n        })\n    }\n\n    useEffect(() => {\n        if (Loading === true) {\n            loadDataInView()\n        }\n    })\n\n    const onRefresh = () => {\n        loadDataInView()\n        setRefreshing(true)\n        setLoading(true)\n\n    }\n\n\n    return (\n        <UserContext.Consumer>\n            {({loggedIn, setLoggedin}) => (\n                <View style={styles.container}>\n                    <View style={styles.header}>\n                        <Text style={styles.smallText}>\n                            Showing All Trains For Your Location\n                        </Text>\n\n                        <Text style={styles.title}>\n                            üó∫ {route.params.stationName}\n                        </Text>\n                    </View>\n                    <ScrollView style={styles.container}\n                                refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh}/>}>\n                        <TrainsList trains={trains}/>\n                        <Text style={{\n                            textAlign: \"center\",\n                            paddingVertical: 20\n                        }}>{\"No more trains leaving today üöè\"}</Text>\n                    </ScrollView>\n                </View>\n            )}\n        </UserContext.Consumer>\n\n\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n    },\n    header: {\n        padding: 20,\n    },\n    smallText: {\n        fontSize: 15,\n        fontStyle: \"italic\",\n        fontWeight: \"200\",\n        color: \"grey\"\n    },\n    title: {\n        fontSize: 30,\n        fontWeight: \"bold\"\n    }\n});\n"]},"metadata":{},"sourceType":"module"}