{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\LocationScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { searchStations } from \"../constants/stations\";\nimport UserContext from \"../connection/userContext\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { Firebase } from \"../connection/comms\";\nimport { saveData } from \"../connection/AsyncStorage\";\nexport default function LocationScreen(_ref) {\n  var navigation = _ref.navigation;\n  var GOOGLE_PLACES_API_KEY = 'AIzaSyD5d-fefCNOQYqK3IljuyYygcTzWgWmsME';\n  return React.createElement(UserContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(SafeAreaView, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }\n    }, React.createElement(GooglePlacesAutocomplete, {\n      query: {\n        key: GOOGLE_PLACES_API_KEY,\n        language: 'en',\n        components: 'country:pk'\n      },\n      onPress: function onPress(data, details) {\n        var c = details.description;\n\n        if (loggedIn) {\n          setLoggedin(function (previousState) {\n            return _objectSpread(_objectSpread({}, previousState), {}, {\n              city: c\n            });\n          });\n          navigation.navigate(\"Profile\");\n          Firebase.updateData(\"city\", c, loggedIn.uid).then(function (r) {\n            if (r === true) {\n              saveData(loggedIn).then(function (r) {\n                return alert(\"Updated City.\");\n              });\n            }\n          });\n        } else {\n          navigation.navigate(\"Register\", {\n            geoLocation: c\n          });\n        }\n      },\n      placeholder: \"Search Your Location\",\n      enablePoweredByContainer: false,\n      returnKeyType: \"search\",\n      styles: {\n        textInputContainer: {\n          marginTop: 20,\n          marginHorizontal: 10,\n          color: '#5d5d5d',\n          fontSize: 16\n        },\n        textInput: {\n          backgroundColor: \"#fafafa\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }\n    }));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  searchHeader: {}\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/LocationScreen.js"],"names":["React","useState","searchStations","UserContext","GooglePlacesAutocomplete","Firebase","saveData","LocationScreen","navigation","GOOGLE_PLACES_API_KEY","loggedIn","setLoggedin","styles","container","key","language","components","data","details","c","description","previousState","city","navigate","updateData","uid","then","r","alert","geoLocation","textInputContainer","marginTop","marginHorizontal","color","fontSize","textInput","backgroundColor","StyleSheet","create","flex","searchHeader"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;AAEA,SAAQC,cAAR;AACA,OAAOC,WAAP;AACA,SAAQC,wBAAR,QAAuC,yCAAvC;AACA,SAAQC,QAAR;AACA,SAAQC,QAAR;AAIA,eAAe,SAASC,cAAT,OAAsC;AAAA,MAAbC,UAAa,QAAbA,UAAa;AACjD,MAAMC,qBAAqB,GAAG,yCAA9B;AAGA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA,QAAEC,QAAF,SAAEA,QAAF;AAAA,QAAYC,WAAZ,SAAYA,WAAZ;AAAA,WACG,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEC,MAAM,CAACC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,wBAAD;AACI,MAAA,KAAK,EAAE;AACHC,QAAAA,GAAG,EAAEL,qBADF;AAEHM,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,UAAU,EAAE;AAHT,OADX;AAOI,MAAA,OAAO,EAAE,iBAACC,IAAD,EAAOC,OAAP,EAAmB;AACxB,YAAMC,CAAC,GAAGD,OAAO,CAACE,WAAlB;;AAEA,YAAIV,QAAJ,EAAc;AACVC,UAAAA,WAAW,CAAC,UAAAU,aAAa;AAAA,mDAASA,aAAT;AAAwBC,cAAAA,IAAI,EAAEH;AAA9B;AAAA,WAAd,CAAX;AACAX,UAAAA,UAAU,CAACe,QAAX,CAAoB,SAApB;AACAlB,UAAAA,QAAQ,CAACmB,UAAT,CAAoB,MAApB,EAA4BL,CAA5B,EAA+BT,QAAQ,CAACe,GAAxC,EAA6CC,IAA7C,CAAkD,UAAAC,CAAC,EAAI;AACnD,gBAAIA,CAAC,KAAK,IAAV,EAAgB;AACZrB,cAAAA,QAAQ,CAACI,QAAD,CAAR,CAAmBgB,IAAnB,CAAwB,UAAAC,CAAC;AAAA,uBAAIC,KAAK,CAAC,eAAD,CAAT;AAAA,eAAzB;AACH;AACJ,WAJD;AAKH,SARD,MAQO;AACHpB,UAAAA,UAAU,CAACe,QAAX,CAAoB,UAApB,EAAgC;AAACM,YAAAA,WAAW,EAAEV;AAAd,WAAhC;AACH;AAGJ,OAvBL;AA0BI,MAAA,WAAW,EAAE,sBA1BjB;AA2BI,MAAA,wBAAwB,EAAE,KA3B9B;AA4BI,MAAA,aAAa,EAAE,QA5BnB;AA6BI,MAAA,MAAM,EAAE;AACJW,QAAAA,kBAAkB,EAAE;AAChBC,UAAAA,SAAS,EAAE,EADK;AAEhBC,UAAAA,gBAAgB,EAAE,EAFF;AAGhBC,UAAAA,KAAK,EAAE,SAHS;AAIhBC,UAAAA,QAAQ,EAAE;AAJM,SADhB;AAOJC,QAAAA,SAAS,EAAE;AACPC,UAAAA,eAAe,EAAE;AADV;AAPP,OA7BZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADH;AAAA,GADL,CADJ;AAkDH;AAGD,IAAMxB,MAAM,GAAGyB,UAAU,CAACC,MAAX,CAAkB;AAC7BzB,EAAAA,SAAS,EAAE;AACP0B,IAAAA,IAAI,EAAE,CADC;AAEPH,IAAAA,eAAe,EAAE;AAFV,GADkB;AAK7BI,EAAAA,YAAY,EAAE;AALe,CAAlB,CAAf","sourcesContent":["import React, {useState} from \"react\";\r\nimport {SafeAreaView, StyleSheet, ActivityIndicator} from 'react-native'\r\nimport {searchStations} from \"../constants/stations\";\r\nimport UserContext from \"../connection/userContext\";\r\nimport {GooglePlacesAutocomplete} from \"react-native-google-places-autocomplete\";\r\nimport {Firebase} from \"../connection/comms\";\r\nimport {saveData} from \"../connection/AsyncStorage\";\r\n\r\n\r\n\r\nexport default function LocationScreen({navigation}) {\r\n    const GOOGLE_PLACES_API_KEY = 'AIzaSyD5d-fefCNOQYqK3IljuyYygcTzWgWmsME';\r\n\r\n\r\n    return (\r\n        <UserContext.Consumer>\r\n            {({loggedIn, setLoggedin}) => (\r\n                <SafeAreaView style={styles.container}>\r\n                    <GooglePlacesAutocomplete\r\n                        query={{\r\n                            key: GOOGLE_PLACES_API_KEY,\r\n                            language: 'en',\r\n                            components: 'country:pk',\r\n                            // types: \"(cities)\"\r\n                        }}\r\n                        onPress={(data, details) => {\r\n                            const c = details.description\r\n\r\n                            if (loggedIn) {\r\n                                setLoggedin(previousState => ({...previousState, city: c}));\r\n                                navigation.navigate(\"Profile\");\r\n                                Firebase.updateData(\"city\", c, loggedIn.uid).then(r => {\r\n                                    if (r === true) {\r\n                                        saveData(loggedIn).then(r => alert(\"Updated City.\"))\r\n                                    }\r\n                                })\r\n                            } else {\r\n                                navigation.navigate(\"Register\", {geoLocation: c});\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                        }\r\n                        placeholder={\"Search Your Location\"}\r\n                        enablePoweredByContainer={false}\r\n                        returnKeyType={\"search\"}\r\n                        styles={{\r\n                            textInputContainer: {\r\n                                marginTop: 20,\r\n                                marginHorizontal: 10,\r\n                                color: '#5d5d5d',\r\n                                fontSize: 16,\r\n                            },\r\n                            textInput: {\r\n                                backgroundColor: \"#fafafa\"\r\n                            }\r\n                        }}/>\r\n\r\n                </SafeAreaView>\r\n            )}\r\n        </UserContext.Consumer>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n    },\r\n    searchHeader: {}\r\n});\r\n"]},"metadata":{},"sourceType":"module"}