{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\ProfileScreens\\\\SellingOrderDetail.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Avatar, Button, Input, ListItem, Text, Divider } from \"react-native-elements\";\nimport UserContext from \"../../connection/userContext\";\nimport { deleteUserData, getData, saveData } from \"../../connection/AsyncStorage\";\nimport { Firebase } from \"../../connection/comms\";\nimport { Orders } from \"../../connection/OrderHandler\";\nimport { Ionicons } from \"@expo/vector-icons\";\nexport default function SellingOrderDetail(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      Loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      refreshing = _useState4[0],\n      setRefreshing = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      time = _useState6[0],\n      setTime = _useState6[1];\n\n  var loadDataInView = function loadDataInView() {\n    countDown(route.params.order.start, route.params.order.time);\n  };\n\n  useEffect(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) != null && _route$params.reload) {\n      loadDataInView();\n    }\n\n    if (Loading === true) {\n      loadDataInView();\n    }\n  }, [navigation, route]);\n\n  var onRefresh = function onRefresh() {\n    setRefreshing(true);\n    setLoading(true);\n  };\n\n  function countDown(start, endtime) {\n    var timer;\n    var compareDate = new Date(start);\n    compareDate.setDate(compareDate.getDate() + parseInt(endtime));\n    timer = setInterval(function () {\n      timeBetweenDates(compareDate);\n    }, 1000);\n\n    function timeBetweenDates(toDate) {\n      var dateEntered = toDate;\n      var now = new Date();\n      var difference = dateEntered.getTime() - now.getTime();\n\n      if (difference <= 0) {\n        setTime(\"Time Completed.\");\n        clearInterval(timer);\n      } else {\n        var seconds = Math.floor(difference / 1000);\n        var minutes = Math.floor(seconds / 60);\n        var hours = Math.floor(minutes / 60);\n        var days = Math.floor(hours / 24);\n        hours %= 24;\n        minutes %= 60;\n        seconds %= 60;\n        setTime(days + \":\" + hours + \":\" + minutes + \":\" + seconds);\n      }\n    }\n  }\n\n  return React.createElement(UserContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"padding\",\n      style: styles.container,\n      keyboardVerticalOffset: 100,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, React.createElement(ScrollView, {\n      style: styles.container,\n      contentContainerStyle: styles.contentContainer,\n      refreshControl: React.createElement(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 49\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, React.createElement(ListItem, {\n      title: \"Service: \" + route.params.order.title,\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      title: \"Order Place Date: \" + new Date(route.params.order.start).toLocaleDateString(),\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      title: \"Order ID: \" + route.params.order.id,\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      title: \"Price: Rs.\" + route.params.order.price,\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }), route.params.order.completed ? React.createElement(ListItem, {\n      title: \"Order has been completed.\",\n      titleStyle: {\n        fontWeight: \"bold\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 57\n      }\n    }) : React.createElement(ListItem, {\n      title: \"Timer: \" + time,\n      titleStyle: {\n        fontWeight: \"bold\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 141\n      }\n    }), React.createElement(Divider, {\n      style: {\n        height: 20,\n        backgroundColor: \"#fff\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: {\n        color: \"grey\",\n        paddingLeft: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, \"Customer's Measurements\"), Object.keys(route.params.order.measurements).map(function (k, v) {\n      return React.createElement(View, {\n        style: {\n          flexDirection: \"row\",\n          paddingHorizontal: 20,\n          paddingVertical: 5,\n          justifyContent: \"space-between\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: {\n          width: \"50%\",\n          color: \"#565656\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 33\n        }\n      }, k.toLocaleUpperCase() + \":  \"), React.createElement(Text, {\n        style: {\n          color: \"#565656\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 33\n        }\n      }, route.params.order.measurements[k]));\n    }), route.params.order.accepted ? React.createElement(Text, {\n      style: {\n        color: \"grey\",\n        padding: 20,\n        textAlign: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, \"Orders once accepted, can not be removed.\") : null, React.createElement(Button, {\n      title: \"Accept Order\",\n      disabled: route.params.order.accepted,\n      containerStyle: {\n        paddingHorizontal: 50\n      },\n      onPress: function onPress() {\n        Orders.acceptOrder(route.params.order.id).then(function (r) {\n          navigation.navigate(\"SellingOrder\", {\n            reload: true\n          });\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    })));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  contentContainer: {\n    paddingTop: 30,\n    paddingBottom: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/ProfileScreens/SellingOrderDetail.js"],"names":["React","useContext","useEffect","useState","ImagePicker","Avatar","Button","Input","ListItem","Text","Divider","UserContext","deleteUserData","getData","saveData","Firebase","Orders","Ionicons","SellingOrderDetail","navigation","route","Loading","setLoading","refreshing","setRefreshing","time","setTime","loadDataInView","countDown","params","order","start","reload","onRefresh","endtime","timer","compareDate","Date","setDate","getDate","parseInt","setInterval","timeBetweenDates","toDate","dateEntered","now","difference","getTime","clearInterval","seconds","Math","floor","minutes","hours","days","loggedIn","setLoggedin","Platform","OS","styles","container","contentContainer","title","toLocaleDateString","id","price","completed","fontWeight","height","backgroundColor","color","paddingLeft","Object","keys","measurements","map","k","v","flexDirection","paddingHorizontal","paddingVertical","justifyContent","width","toLocaleUpperCase","accepted","padding","textAlign","acceptOrder","then","r","navigate","StyleSheet","create","flex","paddingTop","paddingBottom"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;;;;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SAAQC,MAAR,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,QAA/B,EAAyCC,IAAzC,EAA+CC,OAA/C,QAA6D,uBAA7D;AACA,OAAOC,WAAP;AACA,SAAQC,cAAR,EAAwBC,OAAxB,EAAiCC,QAAjC;AACA,SAAQC,QAAR;AACA,SAAQC,MAAR;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AAIA,eAAe,SAASC,kBAAT,OAAiD;AAAA;;AAAA,MAApBC,UAAoB,QAApBA,UAAoB;AAAA,MAARC,KAAQ,QAARA,KAAQ;;AAC5D,kBAA8BjB,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOkB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAoCnB,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOoB,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAwBrB,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOsB,IAAP;AAAA,MAAaC,OAAb;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzBC,IAAAA,SAAS,CAACR,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBC,KAApB,EAA2BX,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBL,IAA9C,CAAT;AAEH,GAHD;;AAKAvB,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACZ,yBAAIkB,KAAK,CAACS,MAAV,aAAI,cAAcG,MAAlB,EAA0B;AACtBL,MAAAA,cAAc;AACjB;;AACD,QAAIN,OAAO,KAAK,IAAhB,EAAsB;AAClBM,MAAAA,cAAc;AACjB;AAEJ,GARQ,EAQN,CAACR,UAAD,EAAaC,KAAb,CARM,CAAT;;AAUA,MAAMa,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBT,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEH,GAJD;;AAMA,WAASM,SAAT,CAAmBG,KAAnB,EAA0BG,OAA1B,EAAmC;AAC/B,QAAIC,KAAJ;AACA,QAAIC,WAAW,GAAG,IAAIC,IAAJ,CAASN,KAAT,CAAlB;AACAK,IAAAA,WAAW,CAACE,OAAZ,CAAoBF,WAAW,CAACG,OAAZ,KAAwBC,QAAQ,CAACN,OAAD,CAApD;AACAC,IAAAA,KAAK,GAAGM,WAAW,CAAC,YAAY;AAC5BC,MAAAA,gBAAgB,CAACN,WAAD,CAAhB;AACH,KAFkB,EAEhB,IAFgB,CAAnB;;AAGA,aAASM,gBAAT,CAA0BC,MAA1B,EAAkC;AAC9B,UAAIC,WAAW,GAAGD,MAAlB;AACA,UAAIE,GAAG,GAAG,IAAIR,IAAJ,EAAV;AACA,UAAIS,UAAU,GAAGF,WAAW,CAACG,OAAZ,KAAwBF,GAAG,CAACE,OAAJ,EAAzC;;AACA,UAAID,UAAU,IAAI,CAAlB,EAAqB;AACjBpB,QAAAA,OAAO,CAAC,iBAAD,CAAP;AACAsB,QAAAA,aAAa,CAACb,KAAD,CAAb;AACH,OAHD,MAGO;AACH,YAAIc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAU,GAAG,IAAxB,CAAd;AACA,YAAIM,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAd;AACA,YAAII,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWC,OAAO,GAAG,EAArB,CAAZ;AACA,YAAIE,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWE,KAAK,GAAG,EAAnB,CAAX;AACAA,QAAAA,KAAK,IAAI,EAAT;AACAD,QAAAA,OAAO,IAAI,EAAX;AACAH,QAAAA,OAAO,IAAI,EAAX;AACAvB,QAAAA,OAAO,CAAC4B,IAAI,GAAG,GAAP,GAAaD,KAAb,GAAqB,GAArB,GAA2BD,OAA3B,GAAqC,GAArC,GAA2CH,OAA5C,CAAP;AACH;AACJ;AAEJ;;AACD,SACI,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA,QAAEM,QAAF,SAAEA,QAAF;AAAA,QAAYC,WAAZ,SAAYA,WAAZ;AAAA,WACG,oBAAC,oBAAD;AAAsB,MAAA,QAAQ,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC,SAApE;AACsB,MAAA,KAAK,EAAEC,MAAM,CAACC,SADpC;AAC+C,MAAA,sBAAsB,EAAE,GADvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAED,MAAM,CAACC,SAA1B;AAAqC,MAAA,qBAAqB,EAAED,MAAM,CAACE,gBAAnE;AACY,MAAA,cAAc,EAAE,oBAAC,cAAD;AAAgB,QAAA,UAAU,EAAEtC,UAA5B;AAAwC,QAAA,SAAS,EAAEU,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,cAAcb,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBgC,KAAlD;AAAyD,MAAA,aAAa,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,uBAAwB,IAAIzB,IAAJ,CAASjB,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBC,KAA5B,EAAmCgC,kBAAnC,EAAzC;AAAmG,MAAA,aAAa,MAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAKI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,eAAe3C,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBkC,EAAnD;AAAuD,MAAA,aAAa,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,eAAe5C,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBmC,KAAnD;AAA0D,MAAA,aAAa,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOK7C,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBoC,SAAnB,GAA+B,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,2BAAjB;AAA8C,MAAA,UAAU,EAAE;AAACC,QAAAA,UAAU,EAAE;AAAb,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,GAAmH,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,YAAY1C,IAA7B;AAAmC,MAAA,UAAU,EAAE;AAAC0C,QAAAA,UAAU,EAAE;AAAb,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPxH,EAWI,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,EAAT;AAAaC,QAAAA,eAAe,EAAE;AAA9B,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAYI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,MAAR;AAAgBC,QAAAA,WAAW,EAAE;AAA7B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAZJ,EAaKC,MAAM,CAACC,IAAP,CAAYrD,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmB4C,YAA/B,EAA6CC,GAA7C,CAAiD,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAC9C,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,aAAa,EAAE,KAAhB;AAAuBC,UAAAA,iBAAiB,EAAE,EAA1C;AAA8CC,UAAAA,eAAe,EAAE,CAA/D;AAAkEC,UAAAA,cAAc,EAAE;AAAlF,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE,KAAR;AAAeZ,UAAAA,KAAK,EAAE;AAAtB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgDM,CAAC,CAACO,iBAAF,KAAwB,KAAxE,CADJ,EAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACb,UAAAA,KAAK,EAAE;AAAR,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkClD,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmB4C,YAAnB,CAAgCE,CAAhC,CAAlC,CAFJ,CAD8C;AAAA,KAAjD,CAbL,EAoBKxD,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBsD,QAAnB,GACG,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACd,QAAAA,KAAK,EAAE,MAAR;AAAgBe,QAAAA,OAAO,EAAE,EAAzB;AAA6BC,QAAAA,SAAS,EAAE;AAAxC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADH,GAEyB,IAtB9B,EAuBI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,cAAf;AAA+B,MAAA,QAAQ,EAAElE,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBsD,QAA5D;AAAsE,MAAA,cAAc,EAAE;AAACL,QAAAA,iBAAiB,EAAE;AAApB,OAAtF;AAA+G,MAAA,OAAO,EAAE,mBAAM;AAC1H/D,QAAAA,MAAM,CAACuE,WAAP,CAAmBnE,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBkC,EAAtC,EAA0CwB,IAA1C,CAA+C,UAAAC,CAAC,EAAI;AAChDtE,UAAAA,UAAU,CAACuE,QAAX,CAAoB,cAApB,EAAoC;AAAC1D,YAAAA,MAAM,EAAE;AAAT,WAApC;AACH,SAFD;AAGH,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBJ,CAFJ,CADH;AAAA,GADL,CADJ;AAuCH;AAGD,IAAM2B,MAAM,GAAGgC,UAAU,CAACC,MAAX,CAAkB;AAC7BhC,EAAAA,SAAS,EAAE;AACPiC,IAAAA,IAAI,EAAE,CADC;AAEPxB,IAAAA,eAAe,EAAE;AAFV,GADkB;AAM7BR,EAAAA,gBAAgB,EAAE;AACdiC,IAAAA,UAAU,EAAE,EADE;AAEdC,IAAAA,aAAa,EAAE;AAFD;AANW,CAAlB,CAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {KeyboardAvoidingView, ScrollView, StyleSheet, View, Platform, TextInput, RefreshControl,} from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport {Avatar, Button, Input, ListItem, Text, Divider} from \"react-native-elements\";\r\nimport UserContext from \"../../connection/userContext\";\r\nimport {deleteUserData, getData, saveData} from \"../../connection/AsyncStorage\";\r\nimport {Firebase} from \"../../connection/comms\";\r\nimport {Orders} from \"../../connection/OrderHandler\";\r\nimport {Ionicons} from \"@expo/vector-icons\";\r\n// import firebase from \"firebase\";\r\n\r\n\r\nexport default function SellingOrderDetail({navigation, route}) {\r\n    const [Loading, setLoading] = useState(true)\r\n    const [refreshing, setRefreshing] = useState(false);\r\n    const [time, setTime] = useState(\"\")\r\n\r\n\r\n    const loadDataInView = () => {\r\n        countDown(route.params.order.start, route.params.order.time)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (route.params?.reload) {\r\n            loadDataInView()\r\n        }\r\n        if (Loading === true) {\r\n            loadDataInView()\r\n        }\r\n\r\n    }, [navigation, route])\r\n\r\n    const onRefresh = () => {\r\n        setRefreshing(true)\r\n        setLoading(true)\r\n\r\n    }\r\n\r\n    function countDown(start, endtime) {\r\n        let timer;\r\n        let compareDate = new Date(start);\r\n        compareDate.setDate(compareDate.getDate() + parseInt(endtime));\r\n        timer = setInterval(function () {\r\n            timeBetweenDates(compareDate);\r\n        }, 1000);\r\n        function timeBetweenDates(toDate) {\r\n            let dateEntered = toDate;\r\n            let now = new Date();\r\n            let difference = dateEntered.getTime() - now.getTime();\r\n            if (difference <= 0) {\r\n                setTime(\"Time Completed.\")\r\n                clearInterval(timer);\r\n            } else {\r\n                let seconds = Math.floor(difference / 1000);\r\n                let minutes = Math.floor(seconds / 60);\r\n                let hours = Math.floor(minutes / 60);\r\n                let days = Math.floor(hours / 24);\r\n                hours %= 24;\r\n                minutes %= 60;\r\n                seconds %= 60;\r\n                setTime(days + \":\" + hours + \":\" + minutes + \":\" + seconds)\r\n            }\r\n        }\r\n\r\n    }\r\n    return (\r\n        <UserContext.Consumer>\r\n            {({loggedIn, setLoggedin}) => (\r\n                <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"padding\"}\r\n                                      style={styles.container} keyboardVerticalOffset={100}>\r\n                    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}\r\n                                refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh}/>}>\r\n                        <ListItem title={\"Service: \" + route.params.order.title} bottomDivider/>\r\n                        <ListItem title={\"Order Place Date: \" + (new Date(route.params.order.start).toLocaleDateString())} bottomDivider/>\r\n\r\n                        <ListItem title={\"Order ID: \" + route.params.order.id} bottomDivider/>\r\n                        <ListItem title={\"Price: Rs.\" + route.params.order.price} bottomDivider/>\r\n                        {route.params.order.completed ? <ListItem title={\"Order has been completed.\"} titleStyle={{fontWeight: \"bold\"}}/> : <ListItem title={\"Timer: \" + time} titleStyle={{fontWeight: \"bold\"}}/>}\r\n\r\n\r\n\r\n                        <Divider style={{height: 20, backgroundColor: \"#fff\"}}/>\r\n                        <Text style={{color: \"grey\", paddingLeft: 10}}>Customer's Measurements</Text>\r\n                        {Object.keys(route.params.order.measurements).map((k, v) => (\r\n                            <View style={{flexDirection: \"row\", paddingHorizontal: 20, paddingVertical: 5, justifyContent: \"space-between\"}}>\r\n                                <Text style={{width: \"50%\", color: \"#565656\"}}>{k.toLocaleUpperCase() + \":  \"}</Text>\r\n                                <Text style={{color: \"#565656\"}}>{route.params.order.measurements[k]}</Text>\r\n                            </View>\r\n                        ))}\r\n\r\n                        {route.params.order.accepted ?\r\n                            <Text style={{color: \"grey\", padding: 20, textAlign: \"center\"}}>Orders once accepted, can not be\r\n                                removed.</Text> : null}\r\n                        <Button title={\"Accept Order\"} disabled={route.params.order.accepted} containerStyle={{paddingHorizontal: 50}} onPress={() => {\r\n                            Orders.acceptOrder(route.params.order.id).then(r => {\r\n                                navigation.navigate(\"SellingOrder\", {reload: true})\r\n                            })\r\n                        }}/>\r\n                    </ScrollView>\r\n                </KeyboardAvoidingView>\r\n\r\n            )}\r\n        </UserContext.Consumer>\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n    },\r\n\r\n    contentContainer: {\r\n        paddingTop: 30,\r\n        paddingBottom: 20\r\n    },\r\n\r\n});"]},"metadata":{},"sourceType":"module"}