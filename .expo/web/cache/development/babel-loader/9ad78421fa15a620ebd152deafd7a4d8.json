{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\auth\\\\RegisterScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useState } from \"react\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, CheckBox } from \"react-native-elements\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormInput from \"../../components/FormInput\";\nimport FormButton from \"../../components/FormButton\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport { Firebase } from \"../../connection/comms\";\nimport UserContext from \"../../connection/userContext\";\nvar validationSchema = Yup.object().shape({\n  name: Yup.string().label(\"Name\").required().min(2, \"Must have at least 2 characters\"),\n  city: Yup.string().label(\"City\").required().max(3, \"Must be 3 characters\").min(3, \"Must be 3 characters\"),\n  email: Yup.string().label(\"Email\").email(\"Enter a valid email\").required(\"Please enter a registered email\"),\n  password: Yup.string().label(\"Password\").required().min(6, \"Password should be at least 6 characters \"),\n  confirmPassword: Yup.string().oneOf([Yup.ref(\"password\")], \"Confirm Password must matched Password\").required(\"Confirm Password is required\"),\n  check: Yup.boolean().oneOf([true], \"Please check the agreement\")\n});\n\nfunction Signup(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      passwordVisibility = _useState2[0],\n      setPasswordVisibility = _useState2[1];\n\n  var _useState3 = useState(\"ios-eye\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      passwordIcon = _useState4[0],\n      setPasswordIcon = _useState4[1];\n\n  var _useState5 = useState(\"ios-eye\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      confirmPasswordIcon = _useState6[0],\n      setConfirmPasswordIcon = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmPasswordVisibility = _useState8[0],\n      setConfirmPasswordVisibility = _useState8[1];\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn,\n      setLoggedin = _useContext.setLoggedin;\n\n  function goToLogin() {\n    return navigation.navigate(\"Login\");\n  }\n\n  function handlePasswordVisibility() {\n    if (passwordIcon === \"ios-eye\") {\n      setPasswordIcon(\"ios-eye-off\");\n      setPasswordVisibility(!passwordVisibility);\n    } else if (passwordIcon === \"ios-eye-off\") {\n      setPasswordIcon(\"ios-eye\");\n      setPasswordVisibility(!passwordVisibility);\n    }\n  }\n\n  function handleConfirmPasswordVisibility() {\n    if (confirmPasswordIcon === \"ios-eye\") {\n      setConfirmPasswordIcon(\"ios-eye-off\");\n      setConfirmPasswordVisibility(!confirmPasswordVisibility);\n    } else if (confirmPasswordIcon === \"ios-eye-off\") {\n      setConfirmPasswordIcon(\"ios-eye\");\n      setConfirmPasswordVisibility(!confirmPasswordVisibility);\n    }\n  }\n\n  function handleOnSignup(values, actions) {\n    var name, email, password, city, response, uid, userData, userLoggedin;\n    return _regeneratorRuntime.async(function handleOnSignup$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            name = values.name, email = values.email, password = values.password, city = values.city;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Firebase.signupWithEmail(email, password));\n\n          case 4:\n            response = _context.sent;\n\n            if (!response.user.uid) {\n              _context.next = 14;\n              break;\n            }\n\n            uid = response.user.uid;\n            userData = {\n              email: email,\n              name: name,\n              uid: uid,\n              city: city\n            };\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(Firebase.createNewUser(userData));\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(Firebase.loginWithEmail(email, password));\n\n          case 12:\n            userLoggedin = _context.sent;\n            setLoggedin(userLoggedin);\n\n          case 14:\n            _context.next = 20;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](1);\n            actions.setFieldError(\"general\", _context.t0.message);\n            console.log(_context.t0);\n\n          case 20:\n            _context.prev = 20;\n            actions.setSubmitting(false);\n            return _context.finish(20);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 16, 20, 23]], Promise);\n  }\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.container,\n    enabled: true,\n    behavior: \"padding\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      check: false\n    },\n    onSubmit: function onSubmit(values, actions) {\n      handleOnSignup(values, actions);\n    },\n    validationSchema: validationSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        values = _ref2.values,\n        handleSubmit = _ref2.handleSubmit,\n        errors = _ref2.errors,\n        isValid = _ref2.isValid,\n        touched = _ref2.touched,\n        handleBlur = _ref2.handleBlur,\n        isSubmitting = _ref2.isSubmitting,\n        setFieldValue = _ref2.setFieldValue;\n\n    if (route.params) {\n      if (!values.city) {\n        setFieldValue(\"city\", route.params.stationCode);\n      }\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(FormInput, {\n      name: \"name\",\n      value: values.name,\n      onChangeText: handleChange(\"name\"),\n      placeholder: \"Enter your full name\",\n      iconName: \"md-person\",\n      iconColor: \"#2C384A\",\n      onBlur: handleBlur(\"name\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    }), React.createElement(ErrorMessage, {\n      errorValue: touched.name && errors.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }\n    }), React.createElement(FormInput, {\n      name: \"email\",\n      value: values.email,\n      onChangeText: handleChange(\"email\"),\n      placeholder: \"Enter email\",\n      autoCapitalize: \"none\",\n      iconName: \"ios-mail\",\n      iconColor: \"#2C384A\",\n      onBlur: handleBlur(\"email\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 33\n      }\n    }), React.createElement(ErrorMessage, {\n      errorValue: touched.email && errors.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      value: values.password,\n      onChangeText: handleChange(\"password\"),\n      placeholder: \"Enter password\",\n      iconName: \"ios-lock\",\n      iconColor: \"#2C384A\",\n      onBlur: handleBlur(\"password\"),\n      secureTextEntry: passwordVisibility,\n      rightIcon: React.createElement(TouchableOpacity, {\n        onPress: handlePasswordVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 41\n        }\n      }, React.createElement(Ionicons, {\n        name: passwordIcon,\n        size: 28,\n        color: \"grey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 45\n        }\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 33\n      }\n    }), React.createElement(ErrorMessage, {\n      errorValue: touched.password && errors.password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      value: values.confirmPassword,\n      onChangeText: handleChange(\"confirmPassword\"),\n      placeholder: \"Confirm password\",\n      iconName: \"ios-lock\",\n      iconColor: \"#2C384A\",\n      onBlur: handleBlur(\"confirmPassword\"),\n      secureTextEntry: confirmPasswordVisibility,\n      rightIcon: React.createElement(TouchableOpacity, {\n        onPress: handleConfirmPasswordVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 41\n        }\n      }, React.createElement(Ionicons, {\n        name: confirmPasswordIcon,\n        size: 28,\n        color: \"grey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 45\n        }\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 33\n      }\n    }), React.createElement(ErrorMessage, {\n      errorValue: touched.confirmPassword && errors.confirmPassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }), React.createElement(CheckBox, {\n      containerStyle: styles.checkBoxContainer,\n      checkedIcon: \"check-box\",\n      iconType: \"material\",\n      uncheckedIcon: \"check-box-outline-blank\",\n      title: \"Agree to terms and conditions\",\n      checkedTitle: \"You agreed to our terms and conditions\",\n      checked: values.check,\n      onPress: function onPress() {\n        return setFieldValue(\"check\", !values.check);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 33\n      }\n    }), React.createElement(View, {\n      style: styles.buttonContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 33\n      }\n    }, React.createElement(FormButton, {\n      buttonType: \"outline\",\n      onPress: handleSubmit,\n      title: \"SIGNUP\",\n      buttonColor: \"#ef3caf\",\n      disabled: !isValid || isSubmitting,\n      loading: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 37\n      }\n    })), React.createElement(ErrorMessage, {\n      errorValue: errors.general,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 33\n      }\n    }));\n  }), React.createElement(Button, {\n    title: \"Have an account? Login\",\n    onPress: goToLogin,\n    titleStyle: {\n      color: \"#039BE5\"\n    },\n    type: \"clear\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    paddingTop: 50\n  },\n  logoContainer: {\n    marginBottom: 15,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    margin: 25\n  },\n  checkBoxContainer: {\n    backgroundColor: \"#fff\",\n    borderColor: \"#fff\"\n  }\n});\nexport default Signup;","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/auth/RegisterScreen.js"],"names":["React","useContext","useState","Button","CheckBox","Ionicons","Formik","Yup","FormInput","FormButton","ErrorMessage","Firebase","UserContext","validationSchema","object","shape","name","string","label","required","min","city","max","email","password","confirmPassword","oneOf","ref","check","boolean","Signup","navigation","route","passwordVisibility","setPasswordVisibility","passwordIcon","setPasswordIcon","confirmPasswordIcon","setConfirmPasswordIcon","confirmPasswordVisibility","setConfirmPasswordVisibility","loggedIn","setLoggedin","goToLogin","navigate","handlePasswordVisibility","handleConfirmPasswordVisibility","handleOnSignup","values","actions","signupWithEmail","response","user","uid","userData","createNewUser","loginWithEmail","userLoggedin","setFieldError","message","console","log","setSubmitting","styles","container","handleChange","handleSubmit","errors","isValid","touched","handleBlur","isSubmitting","setFieldValue","params","stationCode","checkBoxContainer","buttonContainer","general","color","StyleSheet","create","flex","backgroundColor","paddingTop","logoContainer","marginBottom","alignItems","margin","borderColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;;;;;;AAEA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,uBAA/B;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;AACA,SAAQC,QAAR;AACA,OAAOC,WAAP;AAEA,IAAMC,gBAAgB,GAAGN,GAAG,CAACO,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,IAAI,EAAET,GAAG,CAACU,MAAJ,GACDC,KADC,CACK,MADL,EAEDC,QAFC,GAGDC,GAHC,CAGG,CAHH,EAGM,iCAHN,CADkC;AAKxCC,EAAAA,IAAI,EAAEd,GAAG,CAACU,MAAJ,GACDC,KADC,CACK,MADL,EAEDC,QAFC,GAGDG,GAHC,CAGG,CAHH,EAGM,sBAHN,EAIDF,GAJC,CAIG,CAJH,EAIM,sBAJN,CALkC;AAUxCG,EAAAA,KAAK,EAAEhB,GAAG,CAACU,MAAJ,GACFC,KADE,CACI,OADJ,EAEFK,KAFE,CAEI,qBAFJ,EAGFJ,QAHE,CAGO,iCAHP,CAViC;AAcxCK,EAAAA,QAAQ,EAAEjB,GAAG,CAACU,MAAJ,GACLC,KADK,CACC,UADD,EAELC,QAFK,GAGLC,GAHK,CAGD,CAHC,EAGE,2CAHF,CAd8B;AAkBxCK,EAAAA,eAAe,EAAElB,GAAG,CAACU,MAAJ,GACZS,KADY,CACN,CAACnB,GAAG,CAACoB,GAAJ,CAAQ,UAAR,CAAD,CADM,EACiB,wCADjB,EAEZR,QAFY,CAEH,8BAFG,CAlBuB;AAqBxCS,EAAAA,KAAK,EAAErB,GAAG,CAACsB,OAAJ,GAAcH,KAAd,CAAoB,CAAC,IAAD,CAApB,EAA4B,4BAA5B;AArBiC,CAAnB,CAAzB;;AAwBA,SAASI,MAAT,OAAqC;AAAA,MAApBC,UAAoB,QAApBA,UAAoB;AAAA,MAARC,KAAQ,QAARA,KAAQ;;AAAA,kBAEmB9B,QAAQ,CAAC,IAAD,CAF3B;AAAA;AAAA,MAE1B+B,kBAF0B;AAAA,MAENC,qBAFM;;AAAA,mBAGOhC,QAAQ,CAAC,SAAD,CAHf;AAAA;AAAA,MAG1BiC,YAH0B;AAAA,MAGZC,eAHY;;AAAA,mBAIqBlC,QAAQ,CAAC,SAAD,CAJ7B;AAAA;AAAA,MAI1BmC,mBAJ0B;AAAA,MAILC,sBAJK;;AAAA,mBAKiCpC,QAAQ,CAAC,IAAD,CALzC;AAAA;AAAA,MAK1BqC,yBAL0B;AAAA,MAKCC,4BALD;;AAAA,oBAMDvC,UAAU,CAACW,WAAD,CANT;AAAA,MAM1B6B,QAN0B,eAM1BA,QAN0B;AAAA,MAMhBC,WANgB,eAMhBA,WANgB;;AAQjC,WAASC,SAAT,GAAqB;AACjB,WAAOZ,UAAU,CAACa,QAAX,CAAoB,OAApB,CAAP;AACH;;AAED,WAASC,wBAAT,GAAoC;AAChC,QAAIV,YAAY,KAAK,SAArB,EAAgC;AAC5BC,MAAAA,eAAe,CAAC,aAAD,CAAf;AACAF,MAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACH,KAHD,MAGO,IAAIE,YAAY,KAAK,aAArB,EAAoC;AACvCC,MAAAA,eAAe,CAAC,SAAD,CAAf;AACAF,MAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACH;AACJ;;AAGD,WAASa,+BAAT,GAA2C;AACvC,QAAIT,mBAAmB,KAAK,SAA5B,EAAuC;AACnCC,MAAAA,sBAAsB,CAAC,aAAD,CAAtB;AACAE,MAAAA,4BAA4B,CAAC,CAACD,yBAAF,CAA5B;AACH,KAHD,MAGO,IAAIF,mBAAmB,KAAK,aAA5B,EAA2C;AAC9CC,MAAAA,sBAAsB,CAAC,SAAD,CAAtB;AACAE,MAAAA,4BAA4B,CAAC,CAACD,yBAAF,CAA5B;AACH;AACJ;;AAED,WAAeQ,cAAf,CAA8BC,MAA9B,EAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACWjC,YAAAA,IADX,GAC0CgC,MAD1C,CACWhC,IADX,EACiBO,KADjB,GAC0CyB,MAD1C,CACiBzB,KADjB,EACwBC,QADxB,GAC0CwB,MAD1C,CACwBxB,QADxB,EACkCH,IADlC,GAC0C2B,MAD1C,CACkC3B,IADlC;AAAA;AAAA;AAAA,6CAI+BV,QAAQ,CAACuC,eAAT,CAAyB3B,KAAzB,EAAgCC,QAAhC,CAJ/B;;AAAA;AAIc2B,YAAAA,QAJd;;AAAA,iBAKYA,QAAQ,CAACC,IAAT,CAAcC,GAL1B;AAAA;AAAA;AAAA;;AAMmBA,YAAAA,GANnB,GAM0BF,QAAQ,CAACC,IANnC,CAMmBC,GANnB;AAOkBC,YAAAA,QAPlB,GAO6B;AAAC/B,cAAAA,KAAK,EAALA,KAAD;AAAQP,cAAAA,IAAI,EAAJA,IAAR;AAAcqC,cAAAA,GAAG,EAAHA,GAAd;AAAmBhC,cAAAA,IAAI,EAAJA;AAAnB,aAP7B;AAAA;AAAA,6CAQkBV,QAAQ,CAAC4C,aAAT,CAAuBD,QAAvB,CARlB;;AAAA;AAAA;AAAA,6CASuC3C,QAAQ,CAAC6C,cAAT,CAAwBjC,KAAxB,EAA+BC,QAA/B,CATvC;;AAAA;AASkBiC,YAAAA,YATlB;AAUYf,YAAAA,WAAW,CAACe,YAAD,CAAX;;AAVZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaQR,YAAAA,OAAO,CAACS,aAAR,CAAsB,SAAtB,EAAiC,YAAMC,OAAvC;AACAC,YAAAA,OAAO,CAACC,GAAR;;AAdR;AAAA;AAgBQZ,YAAAA,OAAO,CAACa,aAAR,CAAsB,KAAtB;AAhBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SACI,oBAAC,oBAAD;AAAsB,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApC;AAA+C,IAAA,OAAO,MAAtD;AAAuD,IAAA,QAAQ,EAAC,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AACI,IAAA,aAAa,EAAE;AACXhD,MAAAA,IAAI,EAAE,EADK;AAEXO,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXC,MAAAA,eAAe,EAAE,EAJN;AAKXG,MAAAA,KAAK,EAAE;AALI,KADnB;AAQI,IAAA,QAAQ,EAAE,kBAACoB,MAAD,EAASC,OAAT,EAAqB;AAC3BF,MAAAA,cAAc,CAACC,MAAD,EAASC,OAAT,CAAd;AACH,KAVL;AAWI,IAAA,gBAAgB,EAAEpC,gBAXtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaK,iBAUO;AAAA,QATFoD,YASE,SATFA,YASE;AAAA,QARFjB,MAQE,SARFA,MAQE;AAAA,QAPFkB,YAOE,SAPFA,YAOE;AAAA,QANFC,MAME,SANFA,MAME;AAAA,QALFC,OAKE,SALFA,OAKE;AAAA,QAJFC,OAIE,SAJFA,OAIE;AAAA,QAHFC,UAGE,SAHFA,UAGE;AAAA,QAFFC,YAEE,SAFFA,YAEE;AAAA,QADFC,aACE,SADFA,aACE;;AACJ,QAAIxC,KAAK,CAACyC,MAAV,EAAkB;AACd,UAAI,CAACzB,MAAM,CAAC3B,IAAZ,EAAiB;AACbmD,QAAAA,aAAa,CAAC,MAAD,EAASxC,KAAK,CAACyC,MAAN,CAAaC,WAAtB,CAAb;AACH;AACJ;;AACD,WACI,0CAEI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,KAAK,EAAE1B,MAAM,CAAChC,IAFlB;AAGI,MAAA,YAAY,EAAEiD,YAAY,CAAC,MAAD,CAH9B;AAII,MAAA,WAAW,EAAC,sBAJhB;AAKI,MAAA,QAAQ,EAAC,WALb;AAMI,MAAA,SAAS,EAAC,SANd;AAOI,MAAA,MAAM,EAAEK,UAAU,CAAC,MAAD,CAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAWI,oBAAC,YAAD;AAAc,MAAA,UAAU,EAAED,OAAO,CAACrD,IAAR,IAAgBmD,MAAM,CAACnD,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAYI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,KAAK,EAAEgC,MAAM,CAACzB,KAFlB;AAGI,MAAA,YAAY,EAAE0C,YAAY,CAAC,OAAD,CAH9B;AAII,MAAA,WAAW,EAAC,aAJhB;AAKI,MAAA,cAAc,EAAC,MALnB;AAMI,MAAA,QAAQ,EAAC,UANb;AAOI,MAAA,SAAS,EAAC,SAPd;AAQI,MAAA,MAAM,EAAEK,UAAU,CAAC,OAAD,CARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,EAsBI,oBAAC,YAAD;AAAc,MAAA,UAAU,EAAED,OAAO,CAAC9C,KAAR,IAAiB4C,MAAM,CAAC5C,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBJ,EAuBI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAC,UADT;AAEI,MAAA,KAAK,EAAEyB,MAAM,CAACxB,QAFlB;AAGI,MAAA,YAAY,EAAEyC,YAAY,CAAC,UAAD,CAH9B;AAII,MAAA,WAAW,EAAC,gBAJhB;AAKI,MAAA,QAAQ,EAAC,UALb;AAMI,MAAA,SAAS,EAAC,SANd;AAOI,MAAA,MAAM,EAAEK,UAAU,CAAC,UAAD,CAPtB;AAQI,MAAA,eAAe,EAAErC,kBARrB;AASI,MAAA,SAAS,EACL,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAEY,wBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAEV,YAAhB;AAA8B,QAAA,IAAI,EAAE,EAApC;AAAwC,QAAA,KAAK,EAAC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBJ,EAsCI,oBAAC,YAAD;AAAc,MAAA,UAAU,EAAEkC,OAAO,CAAC7C,QAAR,IAAoB2C,MAAM,CAAC3C,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCJ,EAuCI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAC,UADT;AAEI,MAAA,KAAK,EAAEwB,MAAM,CAACvB,eAFlB;AAGI,MAAA,YAAY,EAAEwC,YAAY,CAAC,iBAAD,CAH9B;AAII,MAAA,WAAW,EAAC,kBAJhB;AAKI,MAAA,QAAQ,EAAC,UALb;AAMI,MAAA,SAAS,EAAC,SANd;AAOI,MAAA,MAAM,EAAEK,UAAU,CAAC,iBAAD,CAPtB;AAQI,MAAA,eAAe,EAAE/B,yBARrB;AASI,MAAA,SAAS,EACL,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAEO,+BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AACI,QAAA,IAAI,EAAET,mBADV;AAEI,QAAA,IAAI,EAAE,EAFV;AAGI,QAAA,KAAK,EAAC,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCJ,EA0DI,oBAAC,YAAD;AACI,MAAA,UAAU,EAAEgC,OAAO,CAAC5C,eAAR,IAA2B0C,MAAM,CAAC1C,eADlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1DJ,EA6DI,oBAAC,QAAD;AACI,MAAA,cAAc,EAAEsC,MAAM,CAACY,iBAD3B;AAEI,MAAA,WAAW,EAAC,WAFhB;AAGI,MAAA,QAAQ,EAAC,UAHb;AAII,MAAA,aAAa,EAAC,yBAJlB;AAKI,MAAA,KAAK,EAAC,+BALV;AAMI,MAAA,YAAY,EAAC,wCANjB;AAOI,MAAA,OAAO,EAAE3B,MAAM,CAACpB,KAPpB;AAQI,MAAA,OAAO,EAAE;AAAA,eAAM4C,aAAa,CAAC,OAAD,EAAU,CAACxB,MAAM,CAACpB,KAAlB,CAAnB;AAAA,OARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7DJ,EAuEI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEmC,MAAM,CAACa,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AACI,MAAA,UAAU,EAAC,SADf;AAEI,MAAA,OAAO,EAAEV,YAFb;AAGI,MAAA,KAAK,EAAC,QAHV;AAII,MAAA,WAAW,EAAC,SAJhB;AAKI,MAAA,QAAQ,EAAE,CAACE,OAAD,IAAYG,YAL1B;AAMI,MAAA,OAAO,EAAEA,YANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAvEJ,EAiFI,oBAAC,YAAD;AAAc,MAAA,UAAU,EAAEJ,MAAM,CAACU,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjFJ,CADJ;AAqFH,GAlHL,CADJ,EAqHI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,wBADV;AAEI,IAAA,OAAO,EAAElC,SAFb;AAGI,IAAA,UAAU,EAAE;AACRmC,MAAAA,KAAK,EAAE;AADC,KAHhB;AAMI,IAAA,IAAI,EAAC,OANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArHJ,CADJ,CADJ;AAkIH;;AAED,IAAMf,MAAM,GAAGgB,UAAU,CAACC,MAAX,CAAkB;AAC7BhB,EAAAA,SAAS,EAAE;AACPiB,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE;AAHL,GADkB;AAM7BC,EAAAA,aAAa,EAAE;AACXC,IAAAA,YAAY,EAAE,EADH;AAEXC,IAAAA,UAAU,EAAE;AAFD,GANc;AAU7BV,EAAAA,eAAe,EAAE;AACbW,IAAAA,MAAM,EAAE;AADK,GAVY;AAa7BZ,EAAAA,iBAAiB,EAAE;AACfO,IAAAA,eAAe,EAAE,MADF;AAEfM,IAAAA,WAAW,EAAE;AAFE;AAbU,CAAlB,CAAf;AAmBA,eAAe1D,MAAf","sourcesContent":["import React, {useContext, useState} from \"react\";\nimport {KeyboardAvoidingView, ScrollView, StyleSheet, TouchableOpacity, View} from \"react-native\";\nimport {Button, CheckBox} from \"react-native-elements\";\nimport {Ionicons} from \"@expo/vector-icons\";\nimport {Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport FormInput from \"../../components/FormInput\";\nimport FormButton from \"../../components/FormButton\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport {Firebase} from \"../../connection/comms\"\nimport UserContext from \"../../connection/userContext\";\n\nconst validationSchema = Yup.object().shape({\n    name: Yup.string()\n        .label(\"Name\")\n        .required()\n        .min(2, \"Must have at least 2 characters\"),\n    city: Yup.string()\n        .label(\"City\")\n        .required()\n        .max(3, \"Must be 3 characters\")\n        .min(3, \"Must be 3 characters\"),\n    email: Yup.string()\n        .label(\"Email\")\n        .email(\"Enter a valid email\")\n        .required(\"Please enter a registered email\"),\n    password: Yup.string()\n        .label(\"Password\")\n        .required()\n        .min(6, \"Password should be at least 6 characters \"),\n    confirmPassword: Yup.string()\n        .oneOf([Yup.ref(\"password\")], \"Confirm Password must matched Password\")\n        .required(\"Confirm Password is required\"),\n    check: Yup.boolean().oneOf([true], \"Please check the agreement\")\n});\n\nfunction Signup({navigation, route}) {\n\n    const [passwordVisibility, setPasswordVisibility] = useState(true);\n    const [passwordIcon, setPasswordIcon] = useState(\"ios-eye\");\n    const [confirmPasswordIcon, setConfirmPasswordIcon] = useState(\"ios-eye\");\n    const [confirmPasswordVisibility, setConfirmPasswordVisibility] = useState(true);\n    const {loggedIn, setLoggedin} = useContext(UserContext);\n\n    function goToLogin() {\n        return navigation.navigate(\"Login\");\n    }\n\n    function handlePasswordVisibility() {\n        if (passwordIcon === \"ios-eye\") {\n            setPasswordIcon(\"ios-eye-off\");\n            setPasswordVisibility(!passwordVisibility);\n        } else if (passwordIcon === \"ios-eye-off\") {\n            setPasswordIcon(\"ios-eye\");\n            setPasswordVisibility(!passwordVisibility);\n        }\n    }\n\n\n    function handleConfirmPasswordVisibility() {\n        if (confirmPasswordIcon === \"ios-eye\") {\n            setConfirmPasswordIcon(\"ios-eye-off\");\n            setConfirmPasswordVisibility(!confirmPasswordVisibility);\n        } else if (confirmPasswordIcon === \"ios-eye-off\") {\n            setConfirmPasswordIcon(\"ios-eye\");\n            setConfirmPasswordVisibility(!confirmPasswordVisibility);\n        }\n    }\n\n    async function handleOnSignup(values, actions) {\n        const {name, email, password, city} = values;\n\n        try {\n            const response = await Firebase.signupWithEmail(email, password);\n            if (response.user.uid) {\n                const {uid} = response.user;\n                const userData = {email, name, uid, city};\n                await Firebase.createNewUser(userData)\n                const userLoggedin = await Firebase.loginWithEmail(email, password)\n                setLoggedin(userLoggedin);\n            }\n        } catch (error) {\n            actions.setFieldError(\"general\", error.message);\n            console.log(error)\n        } finally {\n            actions.setSubmitting(false);\n        }\n    }\n\n    return (\n        <KeyboardAvoidingView style={styles.container} enabled behavior=\"padding\">\n            <ScrollView>\n                <Formik\n                    initialValues={{\n                        name: \"\",\n                        email: \"\",\n                        password: \"\",\n                        confirmPassword: \"\",\n                        check: false\n                    }}\n                    onSubmit={(values, actions) => {\n                        handleOnSignup(values, actions);\n                    }}\n                    validationSchema={validationSchema}\n                >\n                    {({\n                          handleChange,\n                          values,\n                          handleSubmit,\n                          errors,\n                          isValid,\n                          touched,\n                          handleBlur,\n                          isSubmitting,\n                          setFieldValue\n                      }) => {\n                        if (route.params) {\n                            if (!values.city){\n                                setFieldValue(\"city\", route.params.stationCode)\n                            }\n                        }\n                        return (\n                            <>\n\n                                <FormInput\n                                    name=\"name\"\n                                    value={values.name}\n                                    onChangeText={handleChange(\"name\")}\n                                    placeholder=\"Enter your full name\"\n                                    iconName=\"md-person\"\n                                    iconColor=\"#2C384A\"\n                                    onBlur={handleBlur(\"name\")}\n                                />\n                                <ErrorMessage errorValue={touched.name && errors.name}/>\n                                <FormInput\n                                    name=\"email\"\n                                    value={values.email}\n                                    onChangeText={handleChange(\"email\")}\n                                    placeholder=\"Enter email\"\n                                    autoCapitalize=\"none\"\n                                    iconName=\"ios-mail\"\n                                    iconColor=\"#2C384A\"\n                                    onBlur={handleBlur(\"email\")}\n                                />\n                                <ErrorMessage errorValue={touched.email && errors.email}/>\n                                <FormInput\n                                    name=\"password\"\n                                    value={values.password}\n                                    onChangeText={handleChange(\"password\")}\n                                    placeholder=\"Enter password\"\n                                    iconName=\"ios-lock\"\n                                    iconColor=\"#2C384A\"\n                                    onBlur={handleBlur(\"password\")}\n                                    secureTextEntry={passwordVisibility}\n                                    rightIcon={\n                                        <TouchableOpacity onPress={handlePasswordVisibility}>\n                                            <Ionicons name={passwordIcon} size={28} color=\"grey\"/>\n                                        </TouchableOpacity>\n                                    }\n                                />\n                                <ErrorMessage errorValue={touched.password && errors.password}/>\n                                <FormInput\n                                    name=\"password\"\n                                    value={values.confirmPassword}\n                                    onChangeText={handleChange(\"confirmPassword\")}\n                                    placeholder=\"Confirm password\"\n                                    iconName=\"ios-lock\"\n                                    iconColor=\"#2C384A\"\n                                    onBlur={handleBlur(\"confirmPassword\")}\n                                    secureTextEntry={confirmPasswordVisibility}\n                                    rightIcon={\n                                        <TouchableOpacity onPress={handleConfirmPasswordVisibility}>\n                                            <Ionicons\n                                                name={confirmPasswordIcon}\n                                                size={28}\n                                                color=\"grey\"\n                                            />\n                                        </TouchableOpacity>\n                                    }\n                                />\n                                <ErrorMessage\n                                    errorValue={touched.confirmPassword && errors.confirmPassword}\n                                />\n                                <CheckBox\n                                    containerStyle={styles.checkBoxContainer}\n                                    checkedIcon=\"check-box\"\n                                    iconType=\"material\"\n                                    uncheckedIcon=\"check-box-outline-blank\"\n                                    title=\"Agree to terms and conditions\"\n                                    checkedTitle=\"You agreed to our terms and conditions\"\n                                    checked={values.check}\n                                    onPress={() => setFieldValue(\"check\", !values.check)}\n                                />\n                                <View style={styles.buttonContainer}>\n                                    <FormButton\n                                        buttonType=\"outline\"\n                                        onPress={handleSubmit}\n                                        title=\"SIGNUP\"\n                                        buttonColor=\"#ef3caf\"\n                                        disabled={!isValid || isSubmitting}\n                                        loading={isSubmitting}\n                                    />\n                                </View>\n                                <ErrorMessage errorValue={errors.general}/>\n                            </>\n                        )\n                    }}\n                </Formik>\n                <Button\n                    title=\"Have an account? Login\"\n                    onPress={goToLogin}\n                    titleStyle={{\n                        color: \"#039BE5\"\n                    }}\n                    type=\"clear\"\n                />\n            </ScrollView>\n        </KeyboardAvoidingView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"#fff\",\n        paddingTop: 50\n    },\n    logoContainer: {\n        marginBottom: 15,\n        alignItems: \"center\"\n    },\n    buttonContainer: {\n        margin: 25\n    },\n    checkBoxContainer: {\n        backgroundColor: \"#fff\",\n        borderColor: \"#fff\"\n    }\n});\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}