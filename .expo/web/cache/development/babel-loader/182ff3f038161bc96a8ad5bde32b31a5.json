{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\ProfileScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Avatar, Button, Input, ListItem, Text, Divider } from \"react-native-elements\";\nimport UserContext from \"../connection/userContext\";\nimport { deleteUserData, getData, saveData } from \"../connection/AsyncStorage\";\nimport { Firebase } from \"../connection/comms\";\nimport Toast from \"../components/ToastMessage\";\nimport firebase from \"firebase\";\nexport default function ProfileScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn,\n      setLoggedin = _useContext.setLoggedin;\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage(uid) {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [1, 1],\n              quality: 0.5\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              Firebase.userAvatar(result.uri, uid).then(function (dpLink) {\n                console.log(dpLink);\n                Firebase.updateData(\"dp\", dpLink, uid).then(function (s) {\n                  if (s === true) {\n                    setLoggedin(function (previousState) {\n                      return _objectSpread(_objectSpread({}, previousState), {}, {\n                        dp: dpLink\n                      });\n                    });\n                    saveData(loggedIn).then(function () {\n                      return alert(\"Profile Picture Updated.\");\n                    });\n                  }\n                });\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS === \"ios\" ? \"padding\" : \"padding\",\n    style: styles.container,\n    keyboardVerticalOffset: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.container,\n    contentContainerStyle: styles.contentContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: \"center\",\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, React.createElement(Avatar, {\n    source: {\n      uri: loggedIn.dp\n    },\n    size: \"xlarge\",\n    rounded: true,\n    title: loggedIn.name.charAt(0).toUpperCase(),\n    showEditButton: true,\n    onEditPress: function onEditPress() {\n      return pickImage(loggedIn.uid);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      alignItems: \"center\",\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Write bio here (300 chars max)\",\n    defaultValue: loggedIn.bio,\n    maxLength: 300,\n    multiline: true,\n    onChangeText: function onChangeText(e) {\n      setLoggedin(function (previousState) {\n        return _objectSpread(_objectSpread({}, previousState), {}, {\n          bio: e\n        });\n      });\n    },\n    style: {\n      textAlign: \"center\",\n      width: \"80%\",\n      height: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      if (loggedIn.bio != undefined) {\n        Firebase.updateData(\"bio\", loggedIn.bio, loggedIn.uid).then(function (r) {\n          if (r === true) {\n            saveData(loggedIn).then(function (r) {\n              return alert(\"Updated Profile.\");\n            });\n          }\n        });\n      } else {\n        Alert.alert(\"Bio is empty\", \"Please write some text in your bio.\");\n      }\n    },\n    title: \"Update Bio\",\n    titleStyle: {\n      fontSize: 12,\n      color: \"#ef3caf\",\n      textDecorationLine: \"underline\"\n    },\n    type: \"clear\",\n    style: {\n      padding: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  })), React.createElement(ListItem, {\n    topDivider: true,\n    title: \"Full Name\",\n    titleStyle: {\n      fontSize: 14\n    },\n    input: {\n      placeholder: 'Type Here',\n      defaultValue: loggedIn.name,\n      disabled: true,\n      inputStyle: {\n        fontSize: 14\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    topDivider: true,\n    title: \"Email\",\n    titleStyle: {\n      fontSize: 14\n    },\n    input: {\n      placeholder: 'Type Here',\n      defaultValue: loggedIn.email,\n      textContentType: \"emailAddress\",\n      disabled: true,\n      inputStyle: {\n        fontSize: 14\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    topDivider: true,\n    title: \"Location\",\n    titleStyle: {\n      fontSize: 14\n    },\n    input: {\n      placeholder: 'Type Here',\n      textContentType: \"location\",\n      defaultValue: loggedIn.city,\n      onFocus: function onFocus() {\n        navigation.push(\"Location\");\n      },\n      inputStyle: {\n        fontSize: 14\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    titleStyle: {\n      fontSize: 14\n    },\n    topDivider: true,\n    bottomDivider: true,\n    title: \"Seller Mode\",\n    checkBox: {\n      center: true,\n      iconRight: true,\n      checkedTitle: \"Disable \",\n      title: \"Enable \",\n      checked: loggedIn.sellerMode,\n      onPress: function onPress() {\n        console.log(\"1 Current Value : \", loggedIn.sellerMode);\n\n        if (loggedIn.sellerMode === undefined) {\n          setLoggedin(function (previousState) {\n            return _objectSpread(_objectSpread({}, previousState), {}, {\n              sellerMode: true\n            });\n          });\n          Firebase.updateData(\"sellerMode\", true, loggedIn.uid).then(function (r) {\n            return console.log(\"Seller Mode Updated\");\n          });\n        } else if (loggedIn.sellerMode === true) {\n          setLoggedin(function (previousState) {\n            return _objectSpread(_objectSpread({}, previousState), {}, {\n              sellerMode: false\n            });\n          });\n          console.log(loggedIn.sellerMode);\n          Firebase.updateData(\"sellerMode\", false, loggedIn.uid).then(function (r) {\n            return console.log(\"Seller Mode Updated\");\n          });\n        } else if (loggedIn.sellerMode === false) {\n          setLoggedin(function (previousState) {\n            return _objectSpread(_objectSpread({}, previousState), {}, {\n              sellerMode: true\n            });\n          });\n          console.log(loggedIn.sellerMode);\n          Firebase.updateData(\"sellerMode\", true, loggedIn.uid).then(function (r) {\n            return console.log(\"Seller Mode Updated\");\n          });\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }), loggedIn.sellerMode ? React.createElement(React.Fragment, null, React.createElement(Divider, {\n    style: {\n      height: 30,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }), React.createElement(ListItem, {\n    title: \"Selling\",\n    titleStyle: {\n      fontSize: 16,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }), React.createElement(Divider, {\n    style: {\n      height: 10,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }), React.createElement(ListItem, {\n    topDivider: true,\n    titleStyle: {\n      fontSize: 14\n    },\n    title: \"Sales Orders\",\n    onPress: function onPress() {\n      return navigation.navigate(\"SellingOrder\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }), React.createElement(ListItem, {\n    topDivider: true,\n    titleStyle: {\n      fontSize: 14\n    },\n    title: \"Earnings\",\n    onPress: function onPress() {\n      return navigation.navigate(\"Earnings\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }), React.createElement(ListItem, {\n    titleStyle: {\n      fontSize: 14\n    },\n    topDivider: true,\n    title: \"Services\",\n    onPress: function onPress() {\n      return navigation.navigate(\"Services\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 21\n    }\n  })) : null, React.createElement(Divider, {\n    style: {\n      height: 30,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    title: \"Buying\",\n    titleStyle: {\n      fontSize: 16,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }), React.createElement(Divider, {\n    style: {\n      height: 10,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    topDivider: true,\n    titleStyle: {\n      fontSize: 14\n    },\n    title: \"Measurements\",\n    onPress: function onPress() {\n      return navigation.navigate(\"MeasurementsList\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    topDivider: true,\n    titleStyle: {\n      fontSize: 14\n    },\n    title: \"Orders\",\n    onPress: function onPress() {\n      return navigation.navigate(\"BuyingOrders\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }), React.createElement(Divider, {\n    style: {\n      height: 30,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    title: \"Help Center\",\n    titleStyle: {\n      fontSize: 16,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }), React.createElement(Divider, {\n    style: {\n      height: 10,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    titleStyle: {\n      fontSize: 14\n    },\n    topDivider: true,\n    title: \"Help\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }), React.createElement(ListItem, {\n    titleStyle: {\n      fontSize: 14\n    },\n    topDivider: true,\n    title: \"F.A.Q\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    type: \"outline\",\n    title: \"Logout\",\n    buttonStyle: {\n      borderColor: \"#ef3caf\",\n      borderRadius: 20\n    },\n    titleStyle: {\n      color: \"#ef3caf\"\n    },\n    onPress: function onPress() {\n      deleteUserData().then(function () {\n        setLoggedin(undefined);\n        Firebase.signOut().then(function () {\n          return console.log(\"Logged out\");\n        });\n      });\n    },\n    style: {\n      marginTop: 20,\n      marginHorizontal: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  contentContainer: {\n    paddingVertical: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/ProfileScreen.js"],"names":["React","useContext","useEffect","useState","ImagePicker","Avatar","Button","Input","ListItem","Text","Divider","UserContext","deleteUserData","getData","saveData","Firebase","Toast","firebase","ProfileScreen","navigation","route","loggedIn","setLoggedin","Platform","OS","requestCameraRollPermissionsAsync","status","alert","pickImage","uid","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","console","log","cancelled","userAvatar","uri","then","dpLink","updateData","s","previousState","dp","styles","container","contentContainer","alignItems","marginBottom","name","charAt","toUpperCase","bio","e","textAlign","width","height","undefined","r","Alert","fontSize","color","textDecorationLine","padding","placeholder","defaultValue","disabled","inputStyle","email","textContentType","city","onFocus","push","center","iconRight","checkedTitle","title","checked","sellerMode","onPress","backgroundColor","fontWeight","navigate","borderColor","borderRadius","signOut","marginTop","marginHorizontal","StyleSheet","create","flex","paddingVertical"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {KeyboardAvoidingView, ScrollView, StyleSheet, View, Platform, TextInput,Alert} from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport {Avatar, Button, Input, ListItem, Text, Divider} from \"react-native-elements\";\nimport UserContext from \"../connection/userContext\";\nimport {deleteUserData, getData, saveData} from \"../connection/AsyncStorage\";\nimport {Firebase} from \"../connection/comms\";\nimport Toast from \"../components/ToastMessage\";\nimport firebase from \"firebase\";\n\n\nexport default function ProfileScreen({navigation, route}) {\n    let {loggedIn, setLoggedin} = useContext(UserContext)\n\n\n    useEffect(() => {\n        (async () => {\n            if (Platform.OS !== 'web') {\n                const {status} = await ImagePicker.requestCameraRollPermissionsAsync();\n                if (status !== 'granted') {\n                    alert('Sorry, we need camera roll permissions to make this work!');\n                }\n            }\n        })();\n    }, []);\n\n\n    const pickImage = async (uid) => {\n        let result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\n            allowsEditing: true,\n            aspect: [1, 1],\n            quality: 0.5,\n        });\n        console.log(result);\n\n        if (!result.cancelled) {\n            Firebase.userAvatar(result.uri, uid)\n                .then(dpLink => {\n                    console.log(dpLink)\n                    Firebase.updateData(\"dp\", dpLink, uid)\n                        .then(s => {\n                            if (s === true) {\n                                setLoggedin(previousState => ({...previousState, dp: dpLink}))\n                                saveData(loggedIn).then(() => alert(\"Profile Picture Updated.\"))\n                            }\n                        })\n                })\n\n        }\n    };\n\n\n    return (\n        <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"padding\"}\n                              style={styles.container} keyboardVerticalOffset={100}>\n\n            {/*{loggedIn.profileStatus === \"incomplete\" ?*/}\n            {/*    <Toast message={\"Please Complete your profile.\"} color={\"#ef3caf\"}/> : null}*/}\n\n            <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n                <View style={{alignItems: \"center\", marginBottom: 20}}>\n                    <Avatar source={{uri: loggedIn.dp}} size={\"xlarge\"} rounded\n                            title={loggedIn.name.charAt(0).toUpperCase()}\n                            showEditButton={true} onEditPress={() => pickImage(loggedIn.uid)}/>\n                </View>\n\n\n                <View style={{alignItems: \"center\", marginBottom: 20}}>\n                    <TextInput placeholder={\"Write bio here (300 chars max)\"} defaultValue={loggedIn.bio}\n                               maxLength={300} multiline={true}\n                               onChangeText={(e) => {\n                                   setLoggedin(previousState => ({...previousState, bio: e}));\n                               }}\n                               style={{textAlign: \"center\", width: \"80%\", height: 50}}/>\n                    <Button\n                        onPress={() => {\n                            if (loggedIn.bio != undefined){\n                                Firebase.updateData(\"bio\", loggedIn.bio, loggedIn.uid).then(r => {\n                                    if (r === true) {\n                                        saveData(loggedIn).then(r => alert(\"Updated Profile.\"))\n                                    }\n                                })\n                            }else{\n                                Alert.alert(\"Bio is empty\", \"Please write some text in your bio.\")\n                            }\n\n                        }}\n                        title={\"Update Bio\"}\n                        titleStyle={{fontSize: 12, color: \"#ef3caf\", textDecorationLine: \"underline\"}}\n                        type=\"clear\"\n                        style={{padding: 10,}}\n                    />\n                </View>\n                <ListItem\n                    topDivider\n                    title=\"Full Name\"\n                    titleStyle={{fontSize: 14}}\n                    input={{\n                        placeholder: 'Type Here',\n                        defaultValue: loggedIn.name,\n                        disabled: true,\n                        inputStyle: {fontSize: 14}\n                    }}\n                />\n                <ListItem\n                    topDivider\n                    title=\"Email\"\n                    titleStyle={{fontSize: 14}}\n                    input={{\n                        placeholder: 'Type Here',\n                        defaultValue: loggedIn.email,\n                        textContentType: \"emailAddress\",\n                        disabled: true,\n                        inputStyle: {fontSize: 14}\n\n                    }}\n                />\n                <ListItem\n                    topDivider\n                    title={\"Location\"}\n                    titleStyle={{fontSize: 14}}\n\n                    input={{\n                        placeholder: 'Type Here',\n                        textContentType: \"location\",\n                        defaultValue: loggedIn.city,\n                        onFocus: () => {\n                            navigation.push(\"Location\")\n                        },\n                        inputStyle: {fontSize: 14}\n                    }}\n                />\n                <ListItem\n                    titleStyle={{fontSize: 14}}\n                    topDivider\n                    bottomDivider\n                    title={\"Seller Mode\"}\n                    checkBox={{\n                        center: true,\n                        iconRight: true,\n                        checkedTitle: \"Disable \",\n                        title: \"Enable \",\n                        checked: loggedIn.sellerMode,\n                        onPress() {\n                            console.log(\"1 Current Value : \", loggedIn.sellerMode);\n\n                            if (loggedIn.sellerMode === undefined) {\n                                setLoggedin(previousState => ({...previousState, sellerMode: true}));\n                                Firebase.updateData(\"sellerMode\", true, loggedIn.uid).then(r => console.log(\"Seller Mode Updated\"))\n                            } else if (loggedIn.sellerMode === true) {\n                                setLoggedin(previousState => ({...previousState, sellerMode: false}));\n                                console.log(loggedIn.sellerMode)\n                                Firebase.updateData(\"sellerMode\", false, loggedIn.uid).then(r => console.log(\"Seller Mode Updated\"))\n                            } else if (loggedIn.sellerMode === false) {\n                                setLoggedin(previousState => ({...previousState, sellerMode: true}));\n                                console.log(loggedIn.sellerMode)\n                                Firebase.updateData(\"sellerMode\", true, loggedIn.uid).then(r => console.log(\"Seller Mode Updated\"))\n                            }\n                        }\n                    }}\n                />\n                {loggedIn.sellerMode ? <>\n                    <Divider style={{height: 30, backgroundColor: \"white\"}}/>\n                    <ListItem\n                        title={\"Selling\"}\n                        titleStyle={{fontSize: 16, fontWeight: \"bold\"}}\n\n                    />\n                    <Divider style={{height: 10, backgroundColor: \"white\"}}/>\n                    <ListItem\n                        topDivider\n                        titleStyle={{fontSize: 14}}\n                        title=\"Sales Orders\"\n                        onPress={()=>navigation.navigate(\"SellingOrder\")}\n                    />\n                    <ListItem\n                        topDivider\n                        titleStyle={{fontSize: 14}}\n                        title=\"Earnings\"\n                        onPress={()=>navigation.navigate(\"Earnings\")}\n                    />\n                    <ListItem\n                        titleStyle={{fontSize: 14}}\n                        topDivider\n                        title=\"Services\"\n                        onPress={()=>navigation.navigate(\"Services\")}\n                    />\n                </> : null}\n                <Divider style={{height: 30, backgroundColor: \"white\"}}/>\n                <ListItem\n                    title={\"Buying\"}\n                    titleStyle={{fontSize: 16, fontWeight: \"bold\"}}\n\n                />\n                <Divider style={{height: 10, backgroundColor: \"white\"}}/>\n                <ListItem\n                    topDivider\n                    titleStyle={{fontSize: 14}}\n\n                    title=\"Measurements\"\n                    onPress={() => navigation.navigate(\"MeasurementsList\")}\n                />\n                <ListItem\n                    topDivider\n                    titleStyle={{fontSize: 14}}\n\n                    title=\"Orders\"\n                    onPress={() => navigation.navigate(\"BuyingOrders\")}\n                />\n\n                <Divider style={{height: 30, backgroundColor: \"white\"}}/>\n                <ListItem\n                    title={\"Help Center\"}\n                    titleStyle={{fontSize: 16, fontWeight: \"bold\"}}\n\n                />\n                <Divider style={{height: 10, backgroundColor: \"white\"}}/>\n                <ListItem\n                    titleStyle={{fontSize: 14}}\n                    topDivider\n                    title=\"Help\"\n                />\n                <ListItem\n                    titleStyle={{fontSize: 14}}\n                    topDivider\n                    title=\"F.A.Q\"\n                />\n\n\n                <Button\n                    type={\"outline\"}\n                    title={\"Logout\"}\n                    buttonStyle={{borderColor: \"#ef3caf\", borderRadius: 20}}\n                    titleStyle={{color: \"#ef3caf\"}}\n                    onPress={() => {\n                        deleteUserData().then(() => {\n                            setLoggedin(undefined)\n                            Firebase.signOut().then(() => console.log(\"Logged out\"))\n                        })\n                    }}\n                    style={{marginTop: 20, marginHorizontal: 20}}\n                />\n\n\n            </ScrollView>\n        </KeyboardAvoidingView>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n    },\n    contentContainer: {\n        paddingVertical: 30,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}