{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\NotificationScreen.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { Avatar, Button, Input, ListItem, Text, Divider } from \"react-native-elements\";\nimport UserContext from \"../connection/userContext\";\nimport { Firebase } from \"../connection/comms\";\nimport * as Notifications from \"expo-notifications\";\nimport firebase from \"firebase\";\nexport default function NotificationScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      notifs = _useState2[0],\n      setNotifs = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      Loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      refreshing = _useState6[0],\n      setRefreshing = _useState6[1];\n\n  useEffect(function () {\n    var unsub = firebase.firestore().collection(\"Orders\").where(\"seller\", \"==\", loggedIn.uid).onSnapshot(function (snapshot) {\n      for (var _iterator = _createForOfIteratorHelperLoose(snapshot.docChanges()), _step; !(_step = _iterator()).done;) {\n        var change = _step.value;\n\n        if (change.type === \"modified\") {\n          var data = change.doc.data();\n\n          if (data.seller === loggedIn.uid && data.completed === true) {\n            var content = {\n              title: data.buyerName + ' accepted your order.',\n              body: \"Your order with \" + data.buyerName + \" is now completed. You have earned Rs.\" + data.price\n            };\n            Notifications.scheduleNotificationAsync({\n              content: content,\n              trigger: null\n            }).then(function (r) {\n              return console.log(\"Notification -> \" + r);\n            });\n          }\n\n          if (data.buyer === loggedIn.uid && data.accepted === true) {\n            var _content = {\n              title: 'Seller started working on your order.',\n              body: \"Seller has agreed to work on the following service: \" + data.title\n            };\n            Notifications.scheduleNotificationAsync({\n              content: _content,\n              trigger: null\n            }).then(function (r) {\n              return console.log(\"Notification -> \" + r);\n            });\n          }\n        }\n      }\n    });\n    return function () {\n      return unsub();\n    };\n  }, []);\n\n  var loadDataInView = function loadDataInView() {\n    console.log(\"LoadDataInView\");\n    firebase.firestore().collection(\"notifications\").doc(loggedIn.uid).collection(\"notifs\").get().then(function (snapshot) {\n      var dataArray = [];\n      snapshot.docs.forEach(function (doc) {\n        var data = doc.data();\n        data.id = doc.id;\n        dataArray.push(data);\n      });\n      console.log(dataArray);\n      setNotifs(dataArray);\n      setLoading(false);\n      setRefreshing(false);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  useEffect(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) != null && _route$params.reload) {\n      loadDataInView();\n    }\n\n    console.log(\"Effect Seller Services\");\n\n    if (Loading === true) {\n      loadDataInView();\n    }\n  }, [navigation, route]);\n\n  var onRefresh = function onRefresh() {\n    setRefreshing(true);\n    setLoading(true);\n    loadDataInView();\n  };\n\n  return React.createElement(UserContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"padding\",\n      style: styles.container,\n      keyboardVerticalOffset: 100,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, React.createElement(ScrollView, {\n      style: styles.container,\n      contentContainerStyle: styles.contentContainer,\n      refreshControl: React.createElement(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 49\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, notifs && notifs.map(function (s, k) {\n      return React.createElement(ListItem, {\n        key: k,\n        title: s.title,\n        subtitle: s.body,\n        subtitleStyle: {\n          color: \"grey\"\n        },\n        bottomDivider: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }\n      });\n    }), React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"grey\",\n        textAlign: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \"No Notifs\")));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  contentContainer: {\n    paddingTop: 30,\n    paddingBottom: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/NotificationScreen.js"],"names":["React","useContext","useEffect","useState","Avatar","Button","Input","ListItem","Text","Divider","UserContext","Firebase","Notifications","firebase","NotificationScreen","navigation","route","loggedIn","notifs","setNotifs","Loading","setLoading","refreshing","setRefreshing","unsub","firestore","collection","where","uid","onSnapshot","snapshot","docChanges","change","type","data","doc","seller","completed","content","title","buyerName","body","price","scheduleNotificationAsync","trigger","then","r","console","log","buyer","accepted","loadDataInView","get","dataArray","docs","forEach","id","push","catch","err","params","reload","onRefresh","setLoggedin","Platform","OS","styles","container","contentContainer","map","s","k","color","fontSize","textAlign","StyleSheet","create","flex","backgroundColor","paddingTop","paddingBottom"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;;;;;;;;AAEA,SAAQC,MAAR,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,QAA/B,EAAyCC,IAAzC,EAA+CC,OAA/C,QAA6D,uBAA7D;AACA,OAAOC,WAAP;AACA,SAAQC,QAAR;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,eAAe,SAASC,kBAAT,OAAiD;AAAA;;AAAA,MAApBC,UAAoB,QAApBA,UAAoB;AAAA,MAARC,KAAQ,QAARA,KAAQ;;AAC5D,oBAAmBf,UAAU,CAACS,WAAD,CAA7B;AAAA,MAAOO,QAAP,eAAOA,QAAP;;AACA,kBAA4Bd,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOe,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA8BhB,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOiB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAoClB,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOmB,UAAP;AAAA,MAAmBC,aAAnB;;AAEArB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIsB,KAAK,GAAGX,QAAQ,CAACY,SAAT,GACPC,UADO,CACI,QADJ,EAEPC,KAFO,CAED,QAFC,EAES,IAFT,EAEeV,QAAQ,CAACW,GAFxB,EAGPC,UAHO,CAGI,UAACC,QAAD,EAAc;AACtB,2DAAqBA,QAAQ,CAACC,UAAT,EAArB,wCAA4C;AAAA,YAAjCC,MAAiC;;AACxC,YAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,cAAIC,IAAI,GAAGF,MAAM,CAACG,GAAP,CAAWD,IAAX,EAAX;;AACA,cAAIA,IAAI,CAACE,MAAL,KAAgBnB,QAAQ,CAACW,GAAzB,IAAgCM,IAAI,CAACG,SAAL,KAAmB,IAAvD,EAA6D;AACzD,gBAAMC,OAAO,GAAG;AACZC,cAAAA,KAAK,EAAEL,IAAI,CAACM,SAAL,GAAiB,uBADZ;AAEZC,cAAAA,IAAI,EAAE,qBAAqBP,IAAI,CAACM,SAA1B,GAAsC,wCAAtC,GAAiFN,IAAI,CAACQ;AAFhF,aAAhB;AAIA9B,YAAAA,aAAa,CAAC+B,yBAAd,CAAwC;AAACL,cAAAA,OAAO,EAAPA,OAAD;AAAUM,cAAAA,OAAO,EAAE;AAAnB,aAAxC,EACKC,IADL,CACU,UAAAC,CAAC;AAAA,qBAAIC,OAAO,CAACC,GAAR,CAAY,qBAAqBF,CAAjC,CAAJ;AAAA,aADX;AAEH;;AACD,cAAIZ,IAAI,CAACe,KAAL,KAAehC,QAAQ,CAACW,GAAxB,IAA+BM,IAAI,CAACgB,QAAL,KAAkB,IAArD,EAA2D;AACvD,gBAAMZ,QAAO,GAAG;AACZC,cAAAA,KAAK,EAAE,uCADK;AAEZE,cAAAA,IAAI,EAAE,yDAAuDP,IAAI,CAACK;AAFtD,aAAhB;AAIA3B,YAAAA,aAAa,CAAC+B,yBAAd,CAAwC;AAACL,cAAAA,OAAO,EAAPA,QAAD;AAAUM,cAAAA,OAAO,EAAE;AAAnB,aAAxC,EACKC,IADL,CACU,UAAAC,CAAC;AAAA,qBAAIC,OAAO,CAACC,GAAR,CAAY,qBAAqBF,CAAjC,CAAJ;AAAA,aADX;AAEH;AAcJ;AACJ;AACJ,KAtCO,CAAZ;AAuCA,WAAO;AAAA,aAAMtB,KAAK,EAAX;AAAA,KAAP;AACH,GAzCQ,EAyCN,EAzCM,CAAT;;AA2CA,MAAM2B,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAnC,IAAAA,QAAQ,CAACY,SAAT,GACKC,UADL,CACgB,eADhB,EAEKS,GAFL,CAESlB,QAAQ,CAACW,GAFlB,EAGKF,UAHL,CAGgB,QAHhB,EAIK0B,GAJL,GAKKP,IALL,CAKU,UAACf,QAAD,EAAc;AAChB,UAAIuB,SAAS,GAAG,EAAhB;AACAvB,MAAAA,QAAQ,CAACwB,IAAT,CAAcC,OAAd,CAAsB,UAAApB,GAAG,EAAI;AACzB,YAAID,IAAI,GAAGC,GAAG,CAACD,IAAJ,EAAX;AACAA,QAAAA,IAAI,CAACsB,EAAL,GAAUrB,GAAG,CAACqB,EAAd;AACAH,QAAAA,SAAS,CAACI,IAAV,CAAevB,IAAf;AACH,OAJD;AAKAa,MAAAA,OAAO,CAACC,GAAR,CAAYK,SAAZ;AACAlC,MAAAA,SAAS,CAACkC,SAAD,CAAT;AACAhC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAhBL,EAgBOmC,KAhBP,CAgBa,UAAAC,GAAG;AAAA,aAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,CAAJ;AAAA,KAhBhB;AAiBH,GAnBD;;AAqBAzD,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACZ,yBAAIc,KAAK,CAAC4C,MAAV,aAAI,cAAcC,MAAlB,EAA0B;AACtBV,MAAAA,cAAc;AACjB;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,QAAI5B,OAAO,KAAK,IAAhB,EAAsB;AAClB+B,MAAAA,cAAc;AACjB;AACJ,GARQ,EAQN,CAACpC,UAAD,EAAaC,KAAb,CARM,CAAT;;AAUA,MAAM8C,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBvC,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA8B,IAAAA,cAAc;AAEjB,GALD;;AAOA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA,QAAElC,QAAF,SAAEA,QAAF;AAAA,QAAY8C,WAAZ,SAAYA,WAAZ;AAAA,WACG,oBAAC,oBAAD;AAAsB,MAAA,QAAQ,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC,SAApE;AACsB,MAAA,KAAK,EAAEC,MAAM,CAACC,SADpC;AAC+C,MAAA,sBAAsB,EAAE,GADvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAED,MAAM,CAACC,SAA1B;AAAqC,MAAA,qBAAqB,EAAED,MAAM,CAACE,gBAAnE;AACY,MAAA,cAAc,EAAE,oBAAC,cAAD;AAAgB,QAAA,UAAU,EAAE9C,UAA5B;AAAwC,QAAA,SAAS,EAAEwC,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK5C,MAAM,IAAIA,MAAM,CAACmD,GAAP,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAClB,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,CAAf;AACU,QAAA,KAAK,EAAED,CAAC,CAAC/B,KADnB;AAEU,QAAA,QAAQ,EAAE+B,CAAC,CAAC7B,IAFtB;AAGU,QAAA,aAAa,EAAE;AAAC+B,UAAAA,KAAK,EAAE;AAAR,SAHzB;AAIU,QAAA,aAAa,MAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADkB;AAAA,KAAX,CAFf,EASI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,QAAQ,EAAE,EAAX;AAAeD,QAAAA,KAAK,EAAE,MAAtB;AAA8BE,QAAAA,SAAS,EAAE;AAAzC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATJ,CAFJ,CADH;AAAA,GADL,CADJ;AAqBH;AAGD,IAAMR,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC7BT,EAAAA,SAAS,EAAE;AACPU,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE;AAFV,GADkB;AAM7BV,EAAAA,gBAAgB,EAAE;AACdW,IAAAA,UAAU,EAAE,EADE;AAEdC,IAAAA,aAAa,EAAE;AAFD;AANW,CAAlB,CAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {KeyboardAvoidingView, ScrollView, StyleSheet, View, Platform, TextInput, RefreshControl,} from 'react-native';\r\nimport {Avatar, Button, Input, ListItem, Text, Divider} from \"react-native-elements\";\r\nimport UserContext from \"../connection/userContext\";\r\nimport {Firebase} from \"../connection/comms\";\r\nimport * as Notifications from \"expo-notifications\";\r\nimport firebase from \"firebase\";\r\n\r\nexport default function NotificationScreen({navigation, route}) {\r\n    const {loggedIn} = useContext(UserContext)\r\n    const [notifs, setNotifs] = useState(null)\r\n    const [Loading, setLoading] = useState(true)\r\n    const [refreshing, setRefreshing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let unsub = firebase.firestore()\r\n            .collection(\"Orders\")\r\n            .where(\"seller\", \"==\", loggedIn.uid)\r\n            .onSnapshot((snapshot) => {\r\n                for (const change of snapshot.docChanges()) {\r\n                    if (change.type === \"modified\") {\r\n                        let data = change.doc.data();\r\n                        if (data.seller === loggedIn.uid && data.completed === true) {\r\n                            const content = {\r\n                                title: data.buyerName + ' accepted your order.',\r\n                                body: \"Your order with \" + data.buyerName + \" is now completed. You have earned Rs.\" + data.price,\r\n                            };\r\n                            Notifications.scheduleNotificationAsync({content, trigger: null})\r\n                                .then(r => console.log(\"Notification -> \" + r));\r\n                        }\r\n                        if (data.buyer === loggedIn.uid && data.accepted === true) {\r\n                            const content = {\r\n                                title: 'Seller started working on your order.',\r\n                                body: \"Seller has agreed to work on the following service: \"+data.title\r\n                            };\r\n                            Notifications.scheduleNotificationAsync({content, trigger: null})\r\n                                .then(r => console.log(\"Notification -> \" + r));\r\n                        }\r\n\r\n\r\n                        // const content = {title: 'Order Modified.', body: \"Service: \"+change.doc.data().title};\r\n                        // return firebase.firestore()\r\n                        //     .collection(\"notifications\")\r\n                        //     .doc(loggedIn.uid)\r\n                        //     .collection(\"notifs\")\r\n                        //     .add(content)\r\n                        //     .then((r) => {\r\n                        //         Notifications.scheduleNotificationAsync({content, trigger: null})\r\n                        //             .then(r => console.log(\"Notification -> \" + r));\r\n                        //         return r\r\n                        //     });\r\n                    }\r\n                }\r\n            });\r\n        return () => unsub()\r\n    }, [])\r\n\r\n    const loadDataInView = () => {\r\n        console.log(\"LoadDataInView\")\r\n        firebase.firestore()\r\n            .collection(\"notifications\")\r\n            .doc(loggedIn.uid)\r\n            .collection(\"notifs\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                let dataArray = [];\r\n                snapshot.docs.forEach(doc => {\r\n                    let data = doc.data()\r\n                    data.id = doc.id\r\n                    dataArray.push(data)\r\n                });\r\n                console.log(dataArray)\r\n                setNotifs(dataArray)\r\n                setLoading(false)\r\n                setRefreshing(false)\r\n            }).catch(err => console.log(err))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (route.params?.reload) {\r\n            loadDataInView()\r\n        }\r\n        console.log(\"Effect Seller Services\")\r\n        if (Loading === true) {\r\n            loadDataInView()\r\n        }\r\n    }, [navigation, route])\r\n\r\n    const onRefresh = () => {\r\n        setRefreshing(true)\r\n        setLoading(true)\r\n        loadDataInView()\r\n\r\n    }\r\n\r\n    return (\r\n        <UserContext.Consumer>\r\n            {({loggedIn, setLoggedin}) => (\r\n                <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"padding\"}\r\n                                      style={styles.container} keyboardVerticalOffset={100}>\r\n                    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}\r\n                                refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh}/>}>\r\n                        {notifs && notifs.map((s, k) => (\r\n                            <ListItem key={k}\r\n                                      title={s.title}\r\n                                      subtitle={s.body}\r\n                                      subtitleStyle={{color: \"grey\"}}\r\n                                      bottomDivider\r\n                            />))}\r\n                        <Text style={{fontSize: 10, color: \"grey\", textAlign: \"center\"}}>No Notifs</Text>\r\n                    </ScrollView>\r\n                </KeyboardAvoidingView>\r\n\r\n            )}\r\n        </UserContext.Consumer>\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n    },\r\n\r\n    contentContainer: {\r\n        paddingTop: 30,\r\n        paddingBottom: 20\r\n    },\r\n\r\n});"]},"metadata":{},"sourceType":"module"}