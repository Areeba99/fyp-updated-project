{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\ProfileScreens\\\\MeasurementsList.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { Avatar, Button, Icon, Input, ListItem, Text } from \"react-native-elements\";\nimport UserContext from \"../../connection/userContext\";\nimport { MeasurementsHandler } from \"../../connection/MeasurementsHandler\";\nimport { Ionicons } from \"@expo/vector-icons\";\nexport default function MeasurementsList(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      list = _useState2[0],\n      setList = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      Loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      refreshing = _useState6[0],\n      setRefreshing = _useState6[1];\n\n  navigation.setOptions({\n    headerRight: function headerRight() {\n      return React.createElement(Button, {\n        type: \"clear\",\n        icon: React.createElement(Icon, {\n          name: \"md-add\",\n          type: \"ionicon\",\n          size: 25,\n          containerStyle: {\n            paddingRight: 10\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 27\n          }\n        }),\n        onPress: function onPress() {\n          return navigation.navigate(\"Measurements\", {\n            addNew: true\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }\n      });\n    }\n  });\n\n  var loadDataInView = function loadDataInView() {\n    MeasurementsHandler.getAll(loggedIn.uid).then(function (r) {\n      setList(r);\n      setRefreshing(false);\n      setLoading(false);\n    });\n  };\n\n  useEffect(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) != null && _route$params.reload) {\n      loadDataInView();\n    }\n\n    if (Loading === true) {\n      loadDataInView();\n    }\n  });\n\n  var onRefresh = function onRefresh() {\n    setRefreshing(true);\n    setLoading(true);\n  };\n\n  return React.createElement(UserContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"padding\",\n      style: styles.container,\n      keyboardVerticalOffset: 100,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 14,\n        fontWeight: \"normal\",\n        padding: 20\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }, \"Add your measurements precisely. These will be shared with the tailors you hire.\"), React.createElement(ScrollView, {\n      style: styles.container,\n      contentContainerStyle: styles.contentContainer,\n      refreshControl: React.createElement(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 49\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, list && list.map(function (l) {\n      return React.createElement(ListItem, {\n        title: l.n,\n        key: l.id,\n        bottomDivider: true,\n        chevron: true,\n        leftIcon: React.createElement(Ionicons, {\n          name: \"md-book\",\n          size: 18,\n          color: \"grey\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 57\n          }\n        }),\n        onPress: function onPress() {\n          navigation.navigate(\"Measurements\", {\n            addNew: false,\n            data: l\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 37\n        }\n      });\n    })));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  contentContainer: {\n    paddingTop: 30,\n    paddingBottom: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/ProfileScreens/MeasurementsList.js"],"names":["React","useContext","useEffect","useState","Avatar","Button","Icon","Input","ListItem","Text","UserContext","MeasurementsHandler","Ionicons","MeasurementsList","navigation","route","loggedIn","list","setList","Loading","setLoading","refreshing","setRefreshing","setOptions","headerRight","paddingRight","navigate","addNew","loadDataInView","getAll","uid","then","r","params","reload","onRefresh","setLoggedin","Platform","OS","styles","container","fontSize","fontWeight","padding","contentContainer","map","l","n","id","data","StyleSheet","create","flex","backgroundColor","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {KeyboardAvoidingView, ScrollView, StyleSheet, View, Platform, TextInput, RefreshControl,} from 'react-native';\r\nimport {Avatar, Button, Icon, Input, ListItem, Text} from \"react-native-elements\";\r\nimport UserContext from \"../../connection/userContext\";\r\nimport {MeasurementsHandler} from \"../../connection/MeasurementsHandler\";\r\nimport {Ionicons} from \"@expo/vector-icons\";\r\n\r\n\r\nexport default function MeasurementsList({navigation, route}) {\r\n    const {loggedIn} = useContext(UserContext)\r\n    const [list, setList] = useState(null)\r\n    const [Loading, setLoading] = useState(true)\r\n    const [refreshing, setRefreshing] = useState(false);\r\n\r\n    navigation.setOptions({\r\n        headerRight: () => (\r\n            <Button type={\"clear\"}\r\n                    icon={<Icon name={\"md-add\"} type={\"ionicon\"} size={25} containerStyle={{paddingRight: 10}}/>}\r\n                    onPress={() => navigation.navigate(\"Measurements\", {addNew: true})}\r\n            />\r\n        ),\r\n    });\r\n\r\n    const loadDataInView = () => {\r\n        MeasurementsHandler.getAll(loggedIn.uid).then(r => {\r\n            setList(r)\r\n            setRefreshing(false)\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (route.params?.reload) {\r\n            loadDataInView()\r\n        }\r\n        if (Loading === true) {\r\n            loadDataInView()\r\n        }\r\n    })\r\n\r\n    const onRefresh = () => {\r\n        setRefreshing(true)\r\n        setLoading(true)\r\n\r\n    }\r\n    return (\r\n        <UserContext.Consumer>\r\n            {({loggedIn, setLoggedin}) => (\r\n                <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"padding\"}\r\n                                      style={styles.container} keyboardVerticalOffset={100}>\r\n                    <Text style={{fontSize: 14, fontWeight: \"normal\", padding: 20}}>Add your measurements\r\n                        precisely. These will be shared with the tailors you hire.</Text>\r\n                    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}\r\n                                refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh}/>}>\r\n                        {list && list.map(l => {\r\n                            return (<ListItem title={l.n} key={l.id} bottomDivider={true} chevron={true}\r\n                                              leftIcon={<Ionicons name={\"md-book\"} size={18} color={\"grey\"}/>}\r\n                                              onPress={() => {\r\n                                                  navigation.navigate(\"Measurements\", {addNew: false, data: l})\r\n                                              }}\r\n                            />)\r\n                        })}\r\n                    </ScrollView>\r\n                </KeyboardAvoidingView>\r\n\r\n            )}\r\n        </UserContext.Consumer>\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n    },\r\n\r\n    contentContainer: {\r\n        paddingTop: 30,\r\n        paddingBottom: 20\r\n    },\r\n\r\n});"]},"metadata":{},"sourceType":"module"}