{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\auth\\\\LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useState } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { Avatar, Button } from \"react-native-elements\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormInput from \"../../components/FormInput\";\nimport FormButton from \"../../components/FormButton\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport { Firebase } from \"../../connection/comms\";\nimport UserContext from \"../../connection/userContext\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().label(\"Email\").email(\"Enter a valid email\").required(\"Please enter a registered email\"),\n  password: Yup.string().label(\"Password\").required().min(6, \"Password must have at least 6 characters \")\n});\n\nfunction Login(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      passwordVisibility = _useState2[0],\n      setPasswordVisibility = _useState2[1];\n\n  var _useState3 = useState(\"ios-eye\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rightIcon = _useState4[0],\n      setRightIcon = _useState4[1];\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn,\n      setLoggedin = _useContext.setLoggedin;\n\n  function goToSignup() {\n    return navigation.navigate(\"Register\");\n  }\n\n  function goToForgotPassword() {\n    return navigation.navigate(\"Reset\");\n  }\n\n  function handlePasswordVisibility() {\n    if (rightIcon === \"ios-eye\") {\n      setRightIcon(\"ios-eye-off\");\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === \"ios-eye-off\") {\n      setRightIcon(\"ios-eye\");\n      setPasswordVisibility(!passwordVisibility);\n    }\n  }\n\n  function handleOnLogin(values, actions) {\n    var email, password, response;\n    return _regeneratorRuntime.async(function handleOnLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Firebase.loginWithEmail(email, password));\n\n          case 4:\n            response = _context.sent;\n\n            if (response) {\n              setLoggedin(response);\n            }\n\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0.code);\n            actions.setFieldError(\"general\", _context.t0.message);\n\n          case 12:\n            _context.prev = 12;\n            actions.setSubmitting(false);\n            return _context.finish(12);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8, 12, 15]], Promise);\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.middle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: \"center\",\n      marginBottom: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/imgIcons/AppLogo.png\"),\n    style: {\n      height: 150,\n      width: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  })), React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(values, actions) {\n      handleOnLogin(values, actions);\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        values = _ref2.values,\n        handleSubmit = _ref2.handleSubmit,\n        errors = _ref2.errors,\n        isValid = _ref2.isValid,\n        touched = _ref2.touched,\n        handleBlur = _ref2.handleBlur,\n        isSubmitting = _ref2.isSubmitting;\n    return React.createElement(React.Fragment, null, React.createElement(FormInput, {\n      name: \"email\",\n      value: values.email,\n      onChangeText: handleChange(\"email\"),\n      placeholder: \"Enter email\",\n      autoCapitalize: \"none\",\n      iconName: \"ios-mail\",\n      iconColor: \"#2C384A\",\n      onBlur: handleBlur(\"email\"),\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }), React.createElement(ErrorMessage, {\n      errorValue: touched.email && errors.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      value: values.password,\n      onChangeText: handleChange(\"password\"),\n      placeholder: \"Enter password\",\n      secureTextEntry: passwordVisibility,\n      iconName: \"ios-lock\",\n      iconColor: \"#2C384A\",\n      onBlur: handleBlur(\"password\"),\n      rightIcon: React.createElement(TouchableOpacity, {\n        onPress: handlePasswordVisibility,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 41\n        }\n      }, React.createElement(Ionicons, {\n        name: rightIcon,\n        size: 28,\n        color: \"grey\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 45\n        }\n      })),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 33\n      }\n    }), React.createElement(ErrorMessage, {\n      errorValue: touched.password && errors.password,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }), React.createElement(View, {\n      style: styles.buttonContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, React.createElement(FormButton, {\n      buttonType: \"outline\",\n      onPress: handleSubmit,\n      title: \"LOGIN\",\n      buttonColor: \"#ef3caf\",\n      disabled: !isValid || isSubmitting,\n      loading: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 37\n      }\n    })), React.createElement(ErrorMessage, {\n      errorValue: errors.general,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 33\n      }\n    }));\n  }), React.createElement(Button, {\n    title: \"Don't have an account? Sign Up\",\n    onPress: goToSignup,\n    titleStyle: {\n      color: \"#ef3caf\"\n    },\n    type: \"clear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }), React.createElement(Button, {\n    title: \"Forgot Password?\",\n    onPress: goToForgotPassword,\n    titleStyle: {\n      color: \"#3282fa\",\n      textDecorationLine: \"underline\"\n    },\n    type: \"clear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#ffffff\",\n    justifyContent: \"center\"\n  },\n  logoContainer: {\n    marginBottom: 500,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    margin: 25\n  },\n  middle: {\n    paddingBottom: 50\n  }\n});\nexport default Login;","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/auth/LoginScreen.js"],"names":["React","useContext","useState","Avatar","Button","Ionicons","Formik","Yup","FormInput","FormButton","ErrorMessage","Firebase","UserContext","validationSchema","object","shape","email","string","label","required","password","min","Login","navigation","passwordVisibility","setPasswordVisibility","rightIcon","setRightIcon","loggedIn","setLoggedin","goToSignup","navigate","goToForgotPassword","handlePasswordVisibility","handleOnLogin","values","actions","loginWithEmail","response","console","log","code","setFieldError","message","setSubmitting","styles","container","middle","alignItems","marginBottom","require","height","width","handleChange","handleSubmit","errors","isValid","touched","handleBlur","isSubmitting","buttonContainer","general","color","textDecorationLine","StyleSheet","create","flex","backgroundColor","justifyContent","logoContainer","margin","paddingBottom"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from \"react\";\nimport {SafeAreaView, StyleSheet, TouchableOpacity, View, Image, ImageBackground} from \"react-native\";\nimport {Avatar, Button} from \"react-native-elements\";\nimport {Ionicons} from \"@expo/vector-icons\";\nimport {Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport FormInput from \"../../components/FormInput\";\nimport FormButton from \"../../components/FormButton\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport {Firebase} from \"../../connection/comms\";\nimport UserContext from \"../../connection/userContext\"\n\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .label(\"Email\")\n        .email(\"Enter a valid email\")\n        .required(\"Please enter a registered email\"),\n    password: Yup.string()\n        .label(\"Password\")\n        .required()\n        .min(6, \"Password must have at least 6 characters \")\n});\n\nfunction Login({navigation}) {\n    const [passwordVisibility, setPasswordVisibility] = useState(true);\n    const [rightIcon, setRightIcon] = useState(\"ios-eye\");\n    const {loggedIn, setLoggedin} = useContext(UserContext);\n\n    function goToSignup() {\n        return navigation.navigate(\"Register\");\n    }\n\n    function goToForgotPassword() {\n        return navigation.navigate(\"Reset\");\n    }\n\n    function handlePasswordVisibility() {\n        if (rightIcon === \"ios-eye\") {\n            setRightIcon(\"ios-eye-off\");\n            setPasswordVisibility(!passwordVisibility);\n        } else if (rightIcon === \"ios-eye-off\") {\n            setRightIcon(\"ios-eye\");\n            setPasswordVisibility(!passwordVisibility);\n        }\n    }\n\n\n    async function handleOnLogin(values, actions) {\n        const {email, password} = values;\n        try {\n            const response = await Firebase.loginWithEmail(email, password);\n            if (response) {\n                setLoggedin(response);\n            }\n        } catch (error) {\n            console.log(error.code)\n            actions.setFieldError(\"general\", error.message);\n        } finally {\n            actions.setSubmitting(false);\n        }\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n                <View style={styles.middle}>\n                    <View style={{alignItems: \"center\", marginBottom: 100}}>\n                        <Image source={require(\"../../assets/imgIcons/AppLogo.png\")} style={{height: 150, width: 400}}/>\n                    </View>\n                    <Formik\n                        initialValues={{email: \"\", password: \"\"}}\n                        onSubmit={(values, actions) => {\n                            handleOnLogin(values, actions);\n                        }}\n                        validationSchema={validationSchema}\n                    >\n                        {({\n                              handleChange,\n                              values,\n                              handleSubmit,\n                              errors,\n                              isValid,\n                              touched,\n                              handleBlur,\n                              isSubmitting\n                          }) => (\n                            <>\n                                <FormInput\n                                    name=\"email\"\n                                    value={values.email}\n                                    onChangeText={handleChange(\"email\")}\n                                    placeholder=\"Enter email\"\n                                    autoCapitalize=\"none\"\n                                    iconName=\"ios-mail\"\n                                    iconColor=\"#2C384A\"\n                                    onBlur={handleBlur(\"email\")}\n                                    keyboardType={\"email-address\"}\n                                />\n                                <ErrorMessage errorValue={touched.email && errors.email}/>\n                                <FormInput\n                                    name=\"password\"\n                                    value={values.password}\n                                    onChangeText={handleChange(\"password\")}\n                                    placeholder=\"Enter password\"\n                                    secureTextEntry={passwordVisibility}\n                                    iconName=\"ios-lock\"\n                                    iconColor=\"#2C384A\"\n                                    onBlur={handleBlur(\"password\")}\n                                    rightIcon={\n                                        <TouchableOpacity onPress={handlePasswordVisibility}>\n                                            <Ionicons name={rightIcon} size={28} color=\"grey\"/>\n                                        </TouchableOpacity>\n                                    }\n                                />\n                                <ErrorMessage errorValue={touched.password && errors.password}/>\n                                <View style={styles.buttonContainer}>\n                                    <FormButton\n                                        buttonType=\"outline\"\n                                        onPress={handleSubmit}\n                                        title=\"LOGIN\"\n                                        buttonColor=\"#ef3caf\"\n                                        disabled={!isValid || isSubmitting}\n                                        loading={isSubmitting}\n                                    />\n                                </View>\n                                <ErrorMessage errorValue={errors.general}/>\n                            </>\n                        )}\n                    </Formik>\n                    <Button\n                        title=\"Don't have an account? Sign Up\"\n                        onPress={goToSignup}\n                        titleStyle={{\n                            color: \"#ef3caf\"\n                        }}\n                        type=\"clear\"\n                    />\n                    <Button\n                        title=\"Forgot Password?\"\n                        onPress={goToForgotPassword}\n                        titleStyle={{\n                            color: \"#3282fa\",\n                            textDecorationLine: \"underline\"\n                        }}\n                        type=\"clear\"\n                    />\n                </View>\n        </SafeAreaView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"#ffffff\",\n        justifyContent: \"center\",\n    },\n    logoContainer: {\n        marginBottom: 500,\n        alignItems: \"center\"\n    },\n    buttonContainer: {\n        margin: 25\n    },\n    middle: {\n        paddingBottom: 50\n    }\n});\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}