{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\ProfileScreens\\\\SellingOrderDetail.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Avatar, Button, Input, ListItem, Text, Divider } from \"react-native-elements\";\nimport UserContext from \"../../connection/userContext\";\nimport { deleteUserData, getData, saveData } from \"../../connection/AsyncStorage\";\nimport { Firebase } from \"../../connection/comms\";\nimport { Orders } from \"../../connection/OrderHandler\";\nimport { Ionicons } from \"@expo/vector-icons\";\nexport default function SellingOrderDetail(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useContext = useContext(UserContext),\n      loggedIn = _useContext.loggedIn;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      orders = _useState2[0],\n      setOrders = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      Loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      refreshing = _useState6[0],\n      setRefreshing = _useState6[1];\n\n  var loadDataInView = function loadDataInView() {\n    console.log(route.params);\n  };\n\n  useEffect(function () {\n    var _route$params;\n\n    if ((_route$params = route.params) != null && _route$params.reload) {\n      loadDataInView();\n    }\n\n    console.log(\"Effect Seller Services\");\n\n    if (Loading === true) {\n      loadDataInView();\n    }\n  }, [navigation, route]);\n\n  var onRefresh = function onRefresh() {\n    setRefreshing(true);\n    setLoading(true);\n  };\n\n  return React.createElement(UserContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"padding\",\n      style: styles.container,\n      keyboardVerticalOffset: 100,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, React.createElement(ScrollView, {\n      style: styles.container,\n      contentContainerStyle: styles.contentContainer,\n      refreshControl: React.createElement(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 49\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, React.createElement(ListItem, {\n      title: \"Service: \" + route.params.order.title,\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      title: \"Order Place Date: \" + new Date(route.params.order.start).toLocaleDateString(),\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      title: \"Expected Time: \" + route.params.order.time,\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      title: \"Order ID: \" + route.params.order.id,\n      bottomDivider: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      title: \"Price: Rs.\" + route.params.order.price,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }), React.createElement(Divider, {\n      style: {\n        height: 20,\n        backgroundColor: \"#fff\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: {\n        color: \"grey\",\n        paddingLeft: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }, \"Customer's Measurements\"), Object.keys(route.params.order.measurements).map(function (k, v) {\n      return React.createElement(ListItem, {\n        title: k + \":  \" + route.params.order.measurements[k],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }\n      });\n    }), route.params.order.accepted ? React.createElement(Text, {\n      style: {\n        color: \"grey\",\n        paddingLeft: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 54\n      }\n    }, \"Orders once accepted, can not be removed.\") : null, React.createElement(Button, {\n      title: \"Accept Order\",\n      disabled: route.params.order.accepted,\n      onPress: function onPress() {\n        Orders.acceptOrder(route.params.order.id).then(function (r) {\n          navigation.navigate(\"SellingOrder\", {\n            reload: true\n          });\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    })));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  contentContainer: {\n    paddingTop: 30,\n    paddingBottom: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/ProfileScreens/SellingOrderDetail.js"],"names":["React","useContext","useEffect","useState","ImagePicker","Avatar","Button","Input","ListItem","Text","Divider","UserContext","deleteUserData","getData","saveData","Firebase","Orders","Ionicons","SellingOrderDetail","navigation","route","loggedIn","orders","setOrders","Loading","setLoading","refreshing","setRefreshing","loadDataInView","console","log","params","reload","onRefresh","setLoggedin","Platform","OS","styles","container","contentContainer","order","title","Date","start","toLocaleDateString","time","id","price","height","backgroundColor","color","paddingLeft","Object","keys","measurements","map","k","v","accepted","acceptOrder","then","r","navigate","StyleSheet","create","flex","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {KeyboardAvoidingView, ScrollView, StyleSheet, View, Platform, TextInput, RefreshControl,} from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport {Avatar, Button, Input, ListItem, Text, Divider} from \"react-native-elements\";\r\nimport UserContext from \"../../connection/userContext\";\r\nimport {deleteUserData, getData, saveData} from \"../../connection/AsyncStorage\";\r\nimport {Firebase} from \"../../connection/comms\";\r\nimport {Orders} from \"../../connection/OrderHandler\";\r\nimport {Ionicons} from \"@expo/vector-icons\";\r\n// import firebase from \"firebase\";\r\n\r\n\r\nexport default function SellingOrderDetail({navigation, route}) {\r\n    const {loggedIn} = useContext(UserContext)\r\n    const [orders, setOrders] = useState(null)\r\n    const [Loading, setLoading] = useState(true)\r\n    const [refreshing, setRefreshing] = useState(false);\r\n\r\n\r\n    const loadDataInView = () => {\r\n        console.log(route.params)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (route.params?.reload){\r\n            loadDataInView()\r\n        }\r\n\r\n        console.log(\"Effect Seller Services\")\r\n        if (Loading === true) {\r\n            loadDataInView()\r\n        }\r\n\r\n    },[navigation, route])\r\n\r\n    const onRefresh = () => {\r\n        setRefreshing(true)\r\n        setLoading(true)\r\n\r\n    }\r\n\r\n    return (\r\n        <UserContext.Consumer>\r\n            {({loggedIn, setLoggedin}) => (\r\n                <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"padding\"}\r\n                                      style={styles.container} keyboardVerticalOffset={100}>\r\n                    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}\r\n                                refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh}/>}>\r\n                        <ListItem title={\"Service: \"+route.params.order.title} bottomDivider/>\r\n                        <ListItem title={\"Order Place Date: \"+(new Date(route.params.order.start).toLocaleDateString())} bottomDivider/>\r\n                        <ListItem title={\"Expected Time: \"+route.params.order.time} bottomDivider/>\r\n                        <ListItem title={\"Order ID: \"+route.params.order.id} bottomDivider/>\r\n                        <ListItem title={\"Price: Rs.\"+route.params.order.price}/>\r\n                        <Divider style={{height: 20, backgroundColor: \"#fff\"}}/>\r\n                        <Text style={{color: \"grey\", paddingLeft: 10}}>Customer's Measurements</Text>\r\n                        {Object.keys(route.params.order.measurements).map((k,v)=> (\r\n                            <ListItem title={k+\":  \"+route.params.order.measurements[k]}/>\r\n                            ))}\r\n\r\n                        {route.params.order.accepted?<Text style={{color: \"grey\", paddingLeft: 10}}>Orders once accepted, can not be removed.</Text>:null}\r\n                        <Button title={\"Accept Order\"} disabled={route.params.order.accepted} onPress={()=>{\r\n                            Orders.acceptOrder(route.params.order.id).then(r =>{navigation.navigate(\"SellingOrder\", {reload: true})})\r\n                        }}/>\r\n                    </ScrollView>\r\n                </KeyboardAvoidingView>\r\n\r\n            )}\r\n        </UserContext.Consumer>\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1 ,\r\n        backgroundColor: '#fff',\r\n    },\r\n\r\n    contentContainer: {\r\n        paddingTop: 30,\r\n        paddingBottom: 20\r\n    },\r\n\r\n});"]},"metadata":{},"sourceType":"module"}