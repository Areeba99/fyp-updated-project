{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\nimport { saveData } from \"./AsyncStorage\";\nfirebase.initializeApp(firebaseConfig);\nexport var Firebase = {\n  loginWithEmail: function loginWithEmail(email, password) {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(function (res) {\n      return firebase.firestore().collection(\"users\").doc(res.user.uid).get().then(function (snapshot) {\n        console.log(\"FROM FIREBASE, Saving user in storage.\");\n        saveData(snapshot.data()).then();\n        return snapshot.data();\n      });\n    });\n  },\n  updateData: function updateData(key, value, uid) {\n    return firebase.firestore().collection(\"users\").doc(uid).update(_defineProperty({}, key, value)).then(function () {\n      console.log(\"Updating: \" + key);\n      return true;\n    });\n  },\n  signupWithEmail: function signupWithEmail(email, password) {\n    return firebase.auth().createUserWithEmailAndPassword(email, password);\n  },\n  signOut: function signOut() {\n    return firebase.auth().signOut();\n  },\n  passwordReset: function passwordReset(email) {\n    return firebase.auth().sendPasswordResetEmail(email);\n  },\n  createNewUser: function createNewUser(userData) {\n    return firebase.firestore().collection(\"users\").doc(\"\" + userData.uid).set(userData);\n  },\n  userAvatar: function userAvatar(uri, uid) {\n    var response, blob, ref, task;\n    return _regeneratorRuntime.async(function userAvatar$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 5:\n            blob = _context.sent;\n            ref = firebase.storage().ref('/avatars/' + uid);\n            task = ref.put(blob);\n            console.log(\"Running Upload Task.\");\n            return _context.abrupt(\"return\", task.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n              console.log(\"DOWNLOAD URL GENERATED\");\n              return downloadURL;\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getHomeScreenData: function getHomeScreenData(uid) {\n    return firebase.firestore().collection(\"users\").where(\"sellerMode\", \"==\", true).where(\"uid\", \"!=\", uid).get().then(function (snapshot) {\n      var dataArray = [];\n      snapshot.docs.forEach(function (doc) {\n        var data = doc.data();\n        dataArray.push(data);\n      });\n      return dataArray;\n    });\n  },\n  addNewService: function addNewService(data, uid) {\n    data.seller = uid;\n    return firebase.firestore().collection(\"services\").add(data).then(function (r) {\n      console.log(\"Added: \" + r);\n      return r;\n    });\n  },\n  serviceIMG: function serviceIMG(uri) {\n    var response, blob, ref;\n    return _regeneratorRuntime.async(function serviceIMG$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 5:\n            blob = _context2.sent;\n            ref = firebase.storage().ref('/services/' + Math.floor(Math.random() * 99999) + 999);\n            return _context2.abrupt(\"return\", ref.put(blob).then(function (snapshot) {\n              return snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                console.log(\"DOWNLOAD URL GENERATED\");\n                return downloadURL;\n              }).catch(function (err) {\n                return console.log(err);\n              });\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getMyServices: function getMyServices(uid) {\n    return firebase.firestore().collection(\"services\").where(\"seller\", \"==\", uid).get().then(function (snapshot) {\n      var dataArray = [];\n      snapshot.docs.forEach(function (doc) {\n        var data = doc.data();\n        dataArray.push(data);\n      });\n      return dataArray;\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/connection/comms.js"],"names":["firebase","firebaseConfig","saveData","initializeApp","Firebase","loginWithEmail","email","password","auth","signInWithEmailAndPassword","then","res","firestore","collection","doc","user","uid","get","snapshot","console","log","data","updateData","key","value","update","signupWithEmail","createUserWithEmailAndPassword","signOut","passwordReset","sendPasswordResetEmail","createNewUser","userData","set","userAvatar","uri","fetch","response","blob","ref","storage","task","put","getDownloadURL","downloadURL","getHomeScreenData","where","dataArray","docs","forEach","push","addNewService","seller","add","r","serviceIMG","Math","floor","random","catch","err","getMyServices"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\nimport {saveData} from \"./AsyncStorage\";\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const Firebase = {\n    loginWithEmail: (email, password) => {\n        return firebase.auth().signInWithEmailAndPassword(email, password).then(res => {\n            return firebase.firestore()\n                .collection(\"users\")\n                .doc(res.user.uid)\n                .get()\n                .then((snapshot) => {\n                    console.log(\"FROM FIREBASE, Saving user in storage.\")\n                    saveData(snapshot.data()).then()\n                    return (snapshot.data())\n                });\n        });\n    },\n\n    updateData: (key, value, uid) => {\n        return firebase.firestore()\n            .collection(\"users\")\n            .doc(uid)\n            .update({[key]: value})\n            .then(() => {\n                console.log(\"Updating: \" + key)\n                return true\n            });\n    },\n\n    signupWithEmail: (email, password) => {\n        return firebase.auth().createUserWithEmailAndPassword(email, password);\n    },\n\n    signOut: () => {\n        return firebase.auth().signOut();\n    },\n\n    passwordReset: email => {\n        return firebase.auth().sendPasswordResetEmail(email);\n    },\n\n    createNewUser: userData => {\n        return firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(`${userData.uid}`)\n            .set(userData);\n    },\n\n    userAvatar: async (uri, uid) => {\n        const response = await fetch(uri);\n        const blob = await response.blob();\n\n        const ref = firebase.storage().ref('/avatars/' + uid);\n        const task = ref.put(blob);\n        console.log(\"Running Upload Task.\")\n        return task.snapshot.ref.getDownloadURL().then((downloadURL) => {\n            console.log(\"DOWNLOAD URL GENERATED\")\n            return downloadURL;\n        });\n\n\n    },\n\n    getHomeScreenData: (uid) => {\n        return firebase\n            .firestore()\n            .collection(\"users\")\n            .where(\"sellerMode\", \"==\", true)\n            .where(\"uid\", \"!=\", uid)\n            .get()\n            .then((snapshot) => {\n                let dataArray = [];\n                snapshot.docs.forEach(doc => {\n                    let data = doc.data()\n                    dataArray.push(data)\n                });\n                return dataArray\n            });\n    },\n\n    addNewService: (data, uid) => {\n        data.seller = uid;\n        return firebase.firestore()\n            .collection(\"services\")\n            .add(data)\n            .then((r) => {\n                console.log(\"Added: \" + r)\n                return r\n            });\n    },\n\n    serviceIMG: async (uri) => {\n        const response = await fetch(uri);\n        const blob = await response.blob();\n\n        const ref = firebase.storage().ref('/services/' + Math.floor(Math.random() * 99999) + 999);\n\n        return ref.put(blob).then(snapshot => snapshot.ref.getDownloadURL().then((downloadURL) => {\n            console.log(\"DOWNLOAD URL GENERATED\")\n            return downloadURL;\n        }).catch(err => console.log(err))\n    )},\n\n    getMyServices: (uid) => {\n    return firebase\n        .firestore()\n        .collection(\"services\")\n        .where(\"seller\", \"==\", uid)\n        .get()\n        .then((snapshot) => {\n            let dataArray = [];\n            snapshot.docs.forEach(doc => {\n                let data = doc.data()\n                dataArray.push(data)\n            });\n            return dataArray\n        });\n},\n\n};\n\n\n"]},"metadata":{},"sourceType":"module"}