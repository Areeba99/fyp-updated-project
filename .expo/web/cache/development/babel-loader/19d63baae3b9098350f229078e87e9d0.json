{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\nimport { saveData } from \"./AsyncStorage\";\nfirebase.initializeApp(firebaseConfig);\nexport var Firebase = {\n  loginWithEmail: function loginWithEmail(email, password) {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(function (res) {\n      return firebase.firestore().collection(\"users\").doc(res.user.uid).get().then(function (snapshot) {\n        console.log(\"FROM FIREBASE, Saving user in storage.\");\n        saveData(snapshot.data()).then();\n        return snapshot.data();\n      });\n    });\n  },\n  updateData: function updateData(key, value, uid) {\n    return firebase.firestore().collection(\"users\").doc(uid).update(_defineProperty({}, key, value)).then(function () {\n      console.log(\"Updating: \" + key);\n      return true;\n    });\n  },\n  signupWithEmail: function signupWithEmail(email, password) {\n    return firebase.auth().createUserWithEmailAndPassword(email, password);\n  },\n  signOut: function signOut() {\n    return firebase.auth().signOut();\n  },\n  passwordReset: function passwordReset(email) {\n    return firebase.auth().sendPasswordResetEmail(email);\n  },\n  createNewUser: function createNewUser(userData) {\n    return firebase.firestore().collection(\"users\").doc(\"\" + userData.uid).set(userData);\n  },\n  userAvatar: function userAvatar(uri, uid) {\n    var response, blob, ref, task;\n    return _regeneratorRuntime.async(function userAvatar$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 5:\n            blob = _context.sent;\n            ref = firebase.storage().ref('/avatars/' + uid);\n            task = ref.put(blob);\n            console.log(\"Running Upload Task.\");\n            return _context.abrupt(\"return\", task.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n              console.log(\"DOWNLOAD URL GENERATED\");\n              return downloadURL;\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/connection/comms.js"],"names":["firebase","firebaseConfig","saveData","initializeApp","Firebase","loginWithEmail","email","password","auth","signInWithEmailAndPassword","then","res","firestore","collection","doc","user","uid","get","snapshot","console","log","data","updateData","key","value","update","signupWithEmail","createUserWithEmailAndPassword","signOut","passwordReset","sendPasswordResetEmail","createNewUser","userData","set","userAvatar","uri","fetch","response","blob","ref","storage","task","put","getDownloadURL","downloadURL"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,OAAOC,cAAP;AACA,SAAQC,QAAR;AAEAF,QAAQ,CAACG,aAAT,CAAuBF,cAAvB;AAEA,OAAO,IAAMG,QAAQ,GAAG;AACpBC,EAAAA,cAAc,EAAE,wBAACC,KAAD,EAAQC,QAAR,EAAqB;AACjC,WAAOP,QAAQ,CAACQ,IAAT,GAAgBC,0BAAhB,CAA2CH,KAA3C,EAAkDC,QAAlD,EAA4DG,IAA5D,CAAiE,UAAAC,GAAG,EAAI;AAC3E,aAAOX,QAAQ,CAACY,SAAT,GACFC,UADE,CACS,OADT,EAEFC,GAFE,CAEEH,GAAG,CAACI,IAAJ,CAASC,GAFX,EAGFC,GAHE,GAIFP,IAJE,CAIG,UAACQ,QAAD,EAAc;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAlB,QAAAA,QAAQ,CAACgB,QAAQ,CAACG,IAAT,EAAD,CAAR,CAA0BX,IAA1B;AACA,eAAQQ,QAAQ,CAACG,IAAT,EAAR;AACH,OARE,CAAP;AASH,KAVM,CAAP;AAWH,GAbmB;AAepBC,EAAAA,UAAU,EAAE,oBAACC,GAAD,EAAMC,KAAN,EAAaR,GAAb,EAAqB;AAC7B,WAAOhB,QAAQ,CAACY,SAAT,GACFC,UADE,CACS,OADT,EAEFC,GAFE,CAEEE,GAFF,EAGFS,MAHE,qBAGOF,GAHP,EAGaC,KAHb,GAIFd,IAJE,CAIG,YAAM;AACRS,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAcG,GAA1B;AACA,aAAO,IAAP;AACH,KAPE,CAAP;AAQH,GAxBmB;AA0BpBG,EAAAA,eAAe,EAAE,yBAACpB,KAAD,EAAQC,QAAR,EAAqB;AAClC,WAAOP,QAAQ,CAACQ,IAAT,GAAgBmB,8BAAhB,CAA+CrB,KAA/C,EAAsDC,QAAtD,CAAP;AACH,GA5BmB;AA8BpBqB,EAAAA,OAAO,EAAE,mBAAM;AACX,WAAO5B,QAAQ,CAACQ,IAAT,GAAgBoB,OAAhB,EAAP;AACH,GAhCmB;AAkCpBC,EAAAA,aAAa,EAAE,uBAAAvB,KAAK,EAAI;AACpB,WAAON,QAAQ,CAACQ,IAAT,GAAgBsB,sBAAhB,CAAuCxB,KAAvC,CAAP;AACH,GApCmB;AAsCpByB,EAAAA,aAAa,EAAE,uBAAAC,QAAQ,EAAI;AACvB,WAAOhC,QAAQ,CACVY,SADE,GAEFC,UAFE,CAES,OAFT,EAGFC,GAHE,MAGKkB,QAAQ,CAAChB,GAHd,EAIFiB,GAJE,CAIED,QAJF,CAAP;AAKH,GA5CmB;AA8CpBE,EAAAA,UAAU,EAAC,oBAAOC,GAAP,EAAYnB,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACgBoB,KAAK,CAACD,GAAD,CADrB;;AAAA;AACDE,YAAAA,QADC;AAAA;AAAA,6CAEYA,QAAQ,CAACC,IAAT,EAFZ;;AAAA;AAEDA,YAAAA,IAFC;AAIDC,YAAAA,GAJC,GAIKvC,QAAQ,CAACwC,OAAT,GAAmBD,GAAnB,CAAuB,cAAcvB,GAArC,CAJL;AAKDyB,YAAAA,IALC,GAKOF,GAAG,CAACG,GAAJ,CAAQJ,IAAR,CALP;AAMPnB,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AANO,6CAOAqB,IAAI,CAACvB,QAAL,CAAcqB,GAAd,CAAkBI,cAAlB,GAAmCjC,IAAnC,CAAwC,UAACkC,WAAD,EAAiB;AAC5DzB,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,qBAAOwB,WAAP;AACH,aAHM,CAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9CS,CAAjB","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\nimport {saveData} from \"./AsyncStorage\";\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const Firebase = {\n    loginWithEmail: (email, password) => {\n        return firebase.auth().signInWithEmailAndPassword(email, password).then(res => {\n            return firebase.firestore()\n                .collection(\"users\")\n                .doc(res.user.uid)\n                .get()\n                .then((snapshot) => {\n                    console.log(\"FROM FIREBASE, Saving user in storage.\")\n                    saveData(snapshot.data()).then()\n                    return (snapshot.data())\n                });\n        });\n    },\n\n    updateData: (key, value, uid) => {\n        return firebase.firestore()\n            .collection(\"users\")\n            .doc(uid)\n            .update({[key]: value})\n            .then(() => {\n                console.log(\"Updating: \"+ key)\n                return true\n            });\n    },\n\n    signupWithEmail: (email, password) => {\n        return firebase.auth().createUserWithEmailAndPassword(email, password);\n    },\n\n    signOut: () => {\n        return firebase.auth().signOut();\n    },\n\n    passwordReset: email => {\n        return firebase.auth().sendPasswordResetEmail(email);\n    },\n\n    createNewUser: userData => {\n        return firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(`${userData.uid}`)\n            .set(userData);\n    },\n\n    userAvatar:async (uri, uid) => {\n        const response = await fetch(uri);\n        const blob = await response.blob();\n\n        const ref = firebase.storage().ref('/avatars/' + uid);\n        const task =  ref.put(blob);\n        console.log(\"Running Upload Task.\")\n        return task.snapshot.ref.getDownloadURL().then((downloadURL) => {\n            console.log(\"DOWNLOAD URL GENERATED\")\n            return downloadURL;\n        });\n\n\n    }\n    // checkUserAuth: user => {\n    //     return firebase.auth().onAuthStateChanged(user);\n    // },\n\n    // getTrainsWithUserCity: (city) => {\n    //     console.log(city)\n    //     return firebase\n    //         .firestore()\n    //         .collection(\"trains\")\n    //         .where(\"dStation\", \"==\", city)\n    //         .get()\n    //         .then((snapshot) => {\n    //             let dataArray = [];\n    //             snapshot.docs.forEach(doc => {\n    //                 let data = doc.data()\n    //                 data.uid = doc.id\n    //                 dataArray.push(data)\n    //             });\n    //             return dataArray\n    //         });\n    // },\n};\n\n// export const Fetch = {\n//     getData: (stationCode) => {\n//         const URL = \"http://transportapi.com/v3/uk/train/station/\"+stationCode+\"/live.json?app_id=d40b0b1a&app_key=0f0404c12a6bdebfb462189386af7263\"\n//         return fetch(URL, {\n//             method: 'get',\n//         }).then(function (response) {\n//             return response.json();\n//         }).then(function (data) {\n//             return data;\n//         }).catch(r => {\n//             console.log(r)\n//         });\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}