{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\fyp\\\\EXPO\\\\screens\\\\SearchScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { ListItem, SearchBar } from \"react-native-elements\";\nimport { searchStations } from \"../constants/stations\";\nimport { Firebase } from \"../connection/comms\";\nimport { saveData } from \"../connection/AsyncStorage\";\nimport UserContext from \"../connection/userContext\";\nexport default function SearchScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      Loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      stations = _useState6[0],\n      setStations = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      refreshing = _useState8[0],\n      setRefreshing = _useState8[1];\n\n  var updateSearch = function updateSearch(search) {\n    setSearch(search);\n  };\n\n  var loadDataInView = function loadDataInView() {\n    if (search !== \"\") {\n      var stationCodes = searchStations(search);\n      setStations(stationCodes);\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  var onRefresh = function onRefresh() {\n    loadDataInView();\n    setRefreshing(true);\n    setLoading(true);\n  };\n\n  return React.createElement(UserContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var loggedIn = _ref2.loggedIn,\n        setLoggedin = _ref2.setLoggedin;\n    return React.createElement(SafeAreaView, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, React.createElement(SearchBar, {\n      platform: \"ios\",\n      cancelButtonTitle: \"Cancel\",\n      placeholder: \"Search trains by stations\",\n      value: search,\n      onChangeText: updateSearch,\n      onSubmitEditing: loadDataInView,\n      containerStyle: {\n        paddingVertical: 50,\n        backgroundColor: \"#fff\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }), React.createElement(ScrollView, {\n      style: styles.container,\n      refreshControl: React.createElement(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 41\n        }\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, stations && stations.map(function (station, key) {\n      var name = Object.keys(station)[0];\n      var code = station[name];\n      return React.createElement(ListItem, {\n        leftElement: React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 33\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 30\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 37\n          }\n        }, \"\\uD83D\\uDE82\")),\n        onLongPress: function onLongPress() {\n          Firebase.updateCity(code, loggedIn.uid).then(function (r) {\n            if (r === true) {\n              setLoggedin(function (previousState) {\n                return _objectSpread(_objectSpread({}, previousState), {}, {\n                  city: code\n                });\n              });\n              saveData(loggedIn).then(Alert.alert(\"Default station updated.\", name));\n            }\n          });\n        },\n        key: key,\n        title: name,\n        titleStyle: {\n          fontWeight: \"bold\"\n        },\n        subtitle: \"👉🏼 \" + code,\n        onPress: function onPress() {\n          navigation.navigate(\"Details\", {\n            stationName: name,\n            stationCode: code\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      });\n    })));\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  searchHeader: {}\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/fyp/EXPO/screens/SearchScreen.js"],"names":["React","useState","ListItem","SearchBar","searchStations","Firebase","saveData","UserContext","SearchScreen","navigation","search","setSearch","Loading","setLoading","undefined","stations","setStations","refreshing","setRefreshing","updateSearch","loadDataInView","stationCodes","onRefresh","loggedIn","setLoggedin","styles","container","paddingVertical","backgroundColor","map","station","key","name","Object","keys","code","fontSize","updateCity","uid","then","r","previousState","city","Alert","alert","fontWeight","navigate","stationName","stationCode","StyleSheet","create","flex","searchHeader"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;;;;AAEA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,uBAAlC;AACA,SAAQC,cAAR;AACA,SAAQC,QAAR;AACA,SAAQC,QAAR;AACA,OAAOC,WAAP;AAGA,eAAe,SAASC,YAAT,OAAoC;AAAA,MAAbC,UAAa,QAAbA,UAAa;;AAAA,kBACnBR,QAAQ,CAAC,EAAD,CADW;AAAA;AAAA,MACxCS,MADwC;AAAA,MAChCC,SADgC;;AAAA,mBAEjBV,QAAQ,CAAC,IAAD,CAFS;AAAA;AAAA,MAExCW,OAFwC;AAAA,MAE/BC,UAF+B;;AAAA,mBAGfZ,QAAQ,CAACa,SAAD,CAHO;AAAA;AAAA,MAGxCC,QAHwC;AAAA,MAG9BC,WAH8B;;AAAA,mBAIXf,QAAQ,CAAC,KAAD,CAJG;AAAA;AAAA,MAIxCgB,UAJwC;AAAA,MAI5BC,aAJ4B;;AAM/C,MAAIC,YAAY,GAAG,SAAfA,YAAe,CAAAT,MAAM,EAAI;AACzBC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACH,GAFD;;AAIA,MAAMU,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,QAAIV,MAAM,KAAK,EAAf,EAAmB;AACf,UAAMW,YAAY,GAAGjB,cAAc,CAACM,MAAD,CAAnC;AACAM,MAAAA,WAAW,CAACK,YAAD,CAAX;AACAR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAK,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GAPD;;AAUA,MAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBF,IAAAA,cAAc;AACdF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAL,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEH,GALD;;AAOA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA,QAAEU,QAAF,SAAEA,QAAF;AAAA,QAAYC,WAAZ,SAAYA,WAAZ;AAAA,WACL,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEC,MAAM,CAACC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,QAAQ,EAAC,KADb;AAEI,MAAA,iBAAiB,EAAC,QAFtB;AAGI,MAAA,WAAW,EAAC,2BAHhB;AAII,MAAA,KAAK,EAAEhB,MAJX;AAKI,MAAA,YAAY,EAAES,YALlB;AAMI,MAAA,eAAe,EAAEC,cANrB;AAOI,MAAA,cAAc,EAAE;AAACO,QAAAA,eAAe,EAAE,EAAlB;AAAsBC,QAAAA,eAAe,EAAE;AAAvC,OAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAUI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEH,MAAM,CAACC,SAA1B;AACY,MAAA,cAAc,EAAE,oBAAC,cAAD;AAAgB,QAAA,UAAU,EAAET,UAA5B;AAAwC,QAAA,SAAS,EAAEK,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKP,QAAQ,IAAIA,QAAQ,CAACc,GAAT,CAAa,UAACC,OAAD,EAAUC,GAAV,EAAkB;AAExC,UAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqB,CAArB,CAAb;AACA,UAAMK,IAAI,GAAGL,OAAO,CAACE,IAAD,CAApB;AACA,aACI,oBAAC,QAAD;AACI,QAAA,WAAW,EACP,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACI,YAAAA,QAAQ,EAAE;AAAX,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAFR;AAQI,QAAA,WAAW,EAAE,uBAAM;AACf/B,UAAAA,QAAQ,CAACgC,UAAT,CAAoBF,IAApB,EAA0BZ,QAAQ,CAACe,GAAnC,EAAwCC,IAAxC,CAA6C,UAAAC,CAAC,EAAI;AAC9C,gBAAIA,CAAC,KAAK,IAAV,EAAgB;AACZhB,cAAAA,WAAW,CAAC,UAAAiB,aAAa;AAAA,uDAASA,aAAT;AAAwBC,kBAAAA,IAAI,EAAEP;AAA9B;AAAA,eAAd,CAAX;AACA7B,cAAAA,QAAQ,CAACiB,QAAD,CAAR,CAAmBgB,IAAnB,CACII,KAAK,CAACC,KAAN,CAAY,0BAAZ,EAAwCZ,IAAxC,CADJ;AAGH;AACJ,WAPD;AAQH,SAjBL;AAkBI,QAAA,GAAG,EAAED,GAlBT;AAmBI,QAAA,KAAK,EAAEC,IAnBX;AAoBI,QAAA,UAAU,EAAE;AAACa,UAAAA,UAAU,EAAE;AAAb,SApBhB;AAqBI,QAAA,QAAQ,EAAE,UAAQV,IArBtB;AAsBI,QAAA,OAAO,EAAE,mBAAI;AACT1B,UAAAA,UAAU,CAACqC,QAAX,CAAoB,SAApB,EAA+B;AAC3BC,YAAAA,WAAW,EAAEf,IADc;AAE3BgB,YAAAA,WAAW,EAAEb;AAFc,WAA/B;AAIH,SA3BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAgCH,KApCY,CAHjB,CAVJ,CADK;AAAA,GADL,CADJ;AA2DH;AAGD,IAAMV,MAAM,GAAGwB,UAAU,CAACC,MAAX,CAAkB;AAC7BxB,EAAAA,SAAS,EAAE;AACPyB,IAAAA,IAAI,EAAE,CADC;AAEPvB,IAAAA,eAAe,EAAE;AAFV,GADkB;AAK7BwB,EAAAA,YAAY,EAAE;AALe,CAAlB,CAAf","sourcesContent":["import React, {useState} from \"react\";\nimport {RefreshControl, SafeAreaView, ScrollView, StyleSheet, Text, View, Alert} from 'react-native'\nimport {ListItem, SearchBar} from \"react-native-elements\";\nimport {searchStations} from \"../constants/stations\";\nimport {Firebase} from \"../connection/comms\";\nimport {saveData} from \"../connection/AsyncStorage\";\nimport UserContext from \"../connection/userContext\";\n\n\nexport default function SearchScreen({navigation}) {\n    const [search, setSearch] = useState(\"\");\n    const [Loading, setLoading] = useState(true)\n    const [stations, setStations] = useState(undefined)\n    const [refreshing, setRefreshing] = useState(false);\n\n    let updateSearch = search => {\n        setSearch(search);\n    }\n\n    const loadDataInView = () => {\n        if (search !== \"\") {\n            const stationCodes = searchStations(search)\n            setStations(stationCodes)\n            setLoading(false)\n            setRefreshing(false)\n        }\n    }\n\n\n    const onRefresh = () => {\n        loadDataInView()\n        setRefreshing(true)\n        setLoading(true)\n\n    }\n\n    return (\n        <UserContext.Consumer>\n            {({loggedIn, setLoggedin}) => (\n        <SafeAreaView style={styles.container}>\n            <SearchBar\n                platform=\"ios\"\n                cancelButtonTitle=\"Cancel\"\n                placeholder='Search trains by stations'\n                value={search}\n                onChangeText={updateSearch}\n                onSubmitEditing={loadDataInView}\n                containerStyle={{paddingVertical: 50, backgroundColor: \"#fff\"}}\n            />\n            <ScrollView style={styles.container}\n                        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh}/>}\n            >\n                {stations && stations.map((station, key) => {\n\n                    const name = Object.keys(station)[0]\n                    const code = station[name]\n                    return (\n                        <ListItem\n                            leftElement={\n                                <View>\n                                    <Text style={{fontSize: 30}}>\n                                        🚂\n                                    </Text>\n                                </View>\n                            }\n                            onLongPress={() => {\n                                Firebase.updateCity(code, loggedIn.uid).then(r => {\n                                    if (r === true) {\n                                        setLoggedin(previousState => ({...previousState, city: code}));\n                                        saveData(loggedIn).then(\n                                            Alert.alert(\"Default station updated.\", name)\n                                        )\n                                    }\n                                })\n                            }}\n                            key={key}\n                            title={name}\n                            titleStyle={{fontWeight: \"bold\"}}\n                            subtitle={\"👉🏼 \"+code}\n                            onPress={()=>{\n                                navigation.navigate(\"Details\", {\n                                    stationName: name,\n                                    stationCode: code\n                                });\n                            }}\n                        />\n                    )\n\n                })}\n            </ScrollView>\n        </SafeAreaView>\n            )}\n        </UserContext.Consumer>\n    )\n\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n    },\n    searchHeader: {}\n});\n"]},"metadata":{},"sourceType":"module"}